# standalone_asr_metrics_baseline.py
# ingest all ASR_*.xlsx spreadsheets in ROOT_DIR and write per-file metrics & a consolidated monthly report

from __future__ import annotations
from typing import Tuple
import os
import re
import requests
import random

from openpyxl import load_workbook, Workbook
from openpyxl.worksheet.worksheet import Worksheet
from openpyxl.styles import Font, Alignment, PatternFill
from openpyxl.utils import get_column_letter
from openpyxl.styles import Border, Side

THIN_SIDE   = Side(border_style="thin", color="D3D3D3")
THIN_BORDER = Border(top=THIN_SIDE, bottom=THIN_SIDE, left=THIN_SIDE, right=THIN_SIDE)
METRICS_COL_WIDTHS = {"A": 30, "B": 13, "C": 16, "D": 22}

CODE_IS_BEING_TESTED: bool = True
CALL_LEVEL_BKGND_COLOR   = "00FFFF"
SAMPLE_LEVEL_BKGND_COLOR = "FFFFFF" # "CFE8D7"
ROOT_DIR: str = "j:/projects/sheet-logic/asr-april-2025-data/" #"j:/projects/sheet-logic/asr-april-2025-data-agent-cust/"
SPREADSHEET_PREFIX: str = "ASR"
WORKSHEET_PREFIX: str = "ASR"
DO_MONTHLY_CONSOLIDATION = True
CALL_LEVEL_GRANULARITY: bool = True

SESSION_ID_COL_NAME: str         = "session_id"
RAW_TRANSCRIPT_COL_NAME: str     = "raw_transcript"
GROUND_TRUTH_COL_NAME: str       = "Ground Truth Transcript"
HALLUCINATION_COL_NAME: str      = "Hallucination"

INPUT_DATA_WORKSHEET_NAME = "input-data"

METRICS_WORKSHEET_NAME: str             = "metrics"
METADATA_COL_NAME: str                  = "metadata"
SECTION_COL_NAME                        = "section"
ENTIRE_COL_NAME: str                    = "entire"
GT_SECTION_TEXT_COL_NAME: str           = "gt section"
MODEL_SECTION_TEXT_COL_NAME: str        = "model text"
WER_COL_NAME                            = "WER"
HALLUCINATION_COUNT_COL_NAME: str       = "Hallucination"
GT_TOKS_COL_NAME: str                   = "GT Toks"
HALLUCINATION_PERCENT_COL_NAME: str     = "Hallucination %"

NUMBER_OF_SECTIONS: int          = 5
WER_POST_ENDPOINT: str           = "https://wer_host:3281/word_error_rate"

WEEKLY_SUMMARY_WORKSHEET_NAME: str        = "weekly-summary"
AVERAGE_WER_COL_NAME: str                 = "AVG_WER"
SESSION_COUNT_COL_NAME: str               = "num sessions"
SUMMARY_HALLUCINATION_COUNT_COL_NAME: str = "Hallucination Count"
HALLUCINATION_AVG_COL_NAME:   str         = "Hallucination Avg"

SAMPLE_SUMMARY_WORKSHEET_NAME: str        = "summary"
AVG_HALLUCINATION_PERCENT_COL_NAME: str   = "Avg Hallucination %"

def get_column_index_map(ws: Worksheet) -> dict[str, int]:
    return {c.value: idx for idx, c in enumerate(ws[1], start=1)}

def debug_print_column_map(ws: Worksheet) -> None:
  hdr_map = get_column_index_map(ws)
  print("Column name -> Excel index -> tuple index")
  for name, excel_idx in hdr_map.items():
    tuple_idx = excel_idx - 1
    col_letter = get_column_letter(excel_idx)
    print(f"{name:30s}  {excel_idx:2d} ({col_letter})  tuple[{tuple_idx}]")

def style_summary_worksheet(ws):
  """
  Apply consistent styling to summary or sample summary sheets:
  - Freeze header
  - Set column widths
  - Apply header font/alignment (row 1)
  - Apply data row style and fill (row 2)
  """
  ws.freeze_panes = "A2"
  ws.auto_filter.ref = f"A1:{get_column_letter(ws.max_column)}{ws.max_row}"

  # Header (row 1)
  for cell in ws[1]:
    cell.font = Font(name="Aptos", size=9, bold=True)
    cell.alignment = Alignment("left", "center")

  # Data row (row 2)
  fill_color = CALL_LEVEL_BKGND_COLOR if CALL_LEVEL_GRANULARITY else SAMPLE_LEVEL_BKGND_COLOR
  for cell in ws[2]:
    cell.font = Font(name="Aptos", size=9)
    cell.alignment = Alignment("left", "center")
    cell.fill = PatternFill("solid", fgColor=fill_color)
    cell.border = THIN_BORDER

  # Set column widths
  for col_letter, width in METRICS_COL_WIDTHS.items():
    ws.column_dimensions[col_letter].width = width

def list_input_spreadsheets(root_dir: str) -> list[str]:
    return sorted(
        os.path.join(root_dir, f)
        for f in os.listdir(root_dir)
        if (
            f.startswith(f"{SPREADSHEET_PREFIX}_")
            and f.lower().endswith(".xlsx")
            and not f.endswith("_metrics.xlsx")
            and not f.endswith("_monthly_metrics.xlsx")
        )
    )

def get_name_of_results_spreadsheet(input_path: str) -> str:
    dir_name = os.path.dirname(input_path)
    base = os.path.basename(input_path).rsplit(".", 1)[0]
    return os.path.join(dir_name, f"{base}_metrics.xlsx")

def preprocess_text(text: str) -> str:
    if not text:
        return ""
    s = str(text).lower()
    s = re.sub(r"[.,\-?…]", " ", s)
    s = re.sub(r"\{[^}]*\}", "", s)
    s = re.sub(r"[\[\]]", "", s)
    return re.sub(r"\s+", " ", s).strip()

def get_wer_from_api(endpoint: str, ground_truth: str, transcript: str) -> Tuple[float, int]:
    if CODE_IS_BEING_TESTED:
        return round(random.uniform(0, 100), 4), random.randint(15, 300)
    try:
        resp = requests.post(
            endpoint,
            json={"groundTruth": ground_truth, "transcript": transcript},
            verify=False,
            timeout=10
        )
        data = resp.json()
        return round(float(data[0]), 4), int(data[1])
    except Exception:
        return float('nan'), None

def add_metrics_sheet(wb: Workbook) -> Worksheet:
    if METRICS_WORKSHEET_NAME in wb.sheetnames:
        del wb[METRICS_WORKSHEET_NAME]
    return wb.create_sheet(METRICS_WORKSHEET_NAME)

def write_header(ws: Worksheet) -> None:
    headers = [
        METADATA_COL_NAME,
        SESSION_ID_COL_NAME,
        SECTION_COL_NAME,
        GT_SECTION_TEXT_COL_NAME,
        MODEL_SECTION_TEXT_COL_NAME,
        WER_COL_NAME,
        HALLUCINATION_COUNT_COL_NAME,
        GT_TOKS_COL_NAME,
        HALLUCINATION_PERCENT_COL_NAME
    ]
    for idx, title in enumerate(headers, start=1):
        cell = ws.cell(row=1, column=idx, value=title)
        cell.font = Font(name="Aptos", size=9, bold=True)
        cell.alignment = Alignment("left", "center")
    ws.freeze_panes = "A2"

def write_metrics_row(
    ws: Worksheet,
    metadata: str,
    session_id: str,
    section,
    gt_text: str,
    model_text: str,
    wer: float,
    hallucination_count: int,
    gt_tok_count: int,
    hallucination_percent: float,
    is_entire: bool = False
) -> int:
    row = ws.max_row + 1
    body_font  = Font(name="Aptos", size=9)
    body_align = Alignment("left", "center")
    fill = PatternFill("solid", fgColor=CALL_LEVEL_BKGND_COLOR if is_entire else SAMPLE_LEVEL_BKGND_COLOR)

    vals = (metadata, session_id, section, gt_text, model_text, wer,
            hallucination_count, gt_tok_count, hallucination_percent)
    for col_idx, v in enumerate(vals, start=1):
        cell = ws.cell(row=row, column=col_idx, value=v)
        cell.font = body_font
        cell.alignment = body_align
        cell.fill = fill
        cell.border = THIN_BORDER
        if ws.cell(1, col_idx).value == WER_COL_NAME:
            cell.number_format = "0.00"
        if ws.cell(1, col_idx).value == HALLUCINATION_PERCENT_COL_NAME:
            cell.number_format = "0.00000"
    return row

def process_sessions(input_ws: Worksheet, metrics_ws: Worksheet, metadata: str) -> None:
    hdr_map = get_column_index_map(input_ws)
    sid_idx = hdr_map[SESSION_ID_COL_NAME] - 1
    raw_idx = hdr_map[RAW_TRANSCRIPT_COL_NAME] - 1
    gt_idx  = hdr_map[GROUND_TRUTH_COL_NAME] - 1

    data = [
        row for row in input_ws.iter_rows(min_row=2, values_only=True)
        if str(row[sid_idx] or "").strip()
    ]
    if not data:
        print(f"No session_id found – skipping process_sessions for {metadata}")
        return

    sessions: dict[str, list[tuple[str, str]]] = {}
    for row in data:
        sid = str(row[sid_idx]).strip()
        sessions.setdefault(sid, []).append((row[raw_idx], row[gt_idx]))

    for sid, entries in sessions.items():
        hallucination_flags = get_hallucination_flags(input_ws, sid)
        gt_all  = " ".join(preprocess_text(gt) for _, gt in entries)
        raw_all = " ".join(preprocess_text(raw) for raw, _ in entries)
        wer_ent, gt_tok_count = get_wer_from_api(WER_POST_ENDPOINT, gt_all, raw_all)
        hallucination_count = sum(hallucination_flags)
        hallucination_percent = (100 * hallucination_count / gt_tok_count) if gt_tok_count else None
        write_metrics_row(metrics_ws, metadata, sid, ENTIRE_COL_NAME,
                          gt_all, raw_all, wer_ent, hallucination_count, gt_tok_count, hallucination_percent, True)

        total = len(entries)
        base  = total // NUMBER_OF_SECTIONS
        rem   = total % NUMBER_OF_SECTIONS
        start = 0
        for sec in range(1, NUMBER_OF_SECTIONS + 1):
            cnt = base + (1 if sec <= rem else 0)
            if cnt == 0: break
            block  = entries[start:start+cnt]
            flags  = hallucination_flags[start:start+cnt]
            start += cnt
            gt_blk = " ".join(preprocess_text(gt) for _, gt in block)
            raw_blk= " ".join(preprocess_text(raw) for raw, _ in block)
            wer_s, gt_tok_count = get_wer_from_api(WER_POST_ENDPOINT, gt_blk, raw_blk)
            hallucination_count = sum(flags)
            hallucination_percent = (100 * hallucination_count / gt_tok_count) if gt_tok_count else None
            write_metrics_row(metrics_ws, metadata, sid, sec,
                              gt_blk, raw_blk, wer_s, hallucination_count, gt_tok_count, hallucination_percent)

def get_hallucination_flags(input_ws: Worksheet, sid: str) -> list[int]:
    hdr_map = get_column_index_map(input_ws)
    sid_idx = hdr_map[SESSION_ID_COL_NAME] - 1
    hi = hdr_map.get(HALLUCINATION_COL_NAME)
    if not hi:
        return []
    hi -= 1
    flags = []
    for row in input_ws.iter_rows(min_row=2, values_only=True):
        if str(row[sid_idx]) == sid:
            flags.append(1 if row[hi] else 0)
    return flags

def style_columns(ws: Worksheet) -> None:
    widths = {1:27, 2:65, 3:9, 4:63, 5:63, 6:9, 7:12, 8:10, 9:15}
    for col, w in widths.items():
        ws.column_dimensions[get_column_letter(col)].width = w
    ws.auto_filter.ref = f"A1:I{ws.max_row}"

def calculate_hallucination_stats(metrics_ws: Worksheet) -> tuple[int, float]:
    hdr_map = get_column_index_map(metrics_ws)
    hi = hdr_map[HALLUCINATION_COUNT_COL_NAME] - 1
    si = hdr_map[SECTION_COL_NAME] - 1
    vals = [
        row[hi] for row in metrics_ws.iter_rows(min_row=2, values_only=True)
        if row[si] == ENTIRE_COL_NAME and isinstance(row[hi], (int, float))
    ]
    total = sum(vals); cnt = len(vals)
    return total, (total / cnt if cnt else 0.0)

def calculate_mean_wer(metrics_ws: Worksheet) -> float:
    hdr_map = get_column_index_map(metrics_ws)
    wi = hdr_map[WER_COL_NAME] - 1
    si = hdr_map[SECTION_COL_NAME] - 1
    vals = [
        row[wi] for row in metrics_ws.iter_rows(min_row=2, values_only=True)
        if row[si] == ENTIRE_COL_NAME and isinstance(row[wi], (int, float))
    ]
    return sum(vals) / len(vals) if vals else 0.0

def add_summary_sheet(wb: Workbook) -> Worksheet:
    if WEEKLY_SUMMARY_WORKSHEET_NAME in wb.sheetnames:
        del wb[WEEKLY_SUMMARY_WORKSHEET_NAME]
    return wb.create_sheet(WEEKLY_SUMMARY_WORKSHEET_NAME)

def write_summary(metrics_ws: Worksheet, summary_ws: Worksheet) -> None:
    headers = [
        METADATA_COL_NAME,
        AVERAGE_WER_COL_NAME,
        SESSION_COUNT_COL_NAME,
        SUMMARY_HALLUCINATION_COUNT_COL_NAME,
        HALLUCINATION_AVG_COL_NAME
    ]
    for i, title in enumerate(headers, start=1):
        c = summary_ws.cell(1, i, title)
        c.font = Font(name="Aptos", size=11, bold=True)
        c.alignment = Alignment("left", "center")

    meta = metrics_ws.cell(2, 1).value
    mean = calculate_mean_wer(metrics_ws)
    total_h, avg_h = calculate_hallucination_stats(metrics_ws)
    hdr_map = get_column_index_map(metrics_ws)
    si = hdr_map[SECTION_COL_NAME] - 1
    sessions = sum(1 for r in metrics_ws.iter_rows(min_row=2, values_only=True) if r[si] == ENTIRE_COL_NAME)

    summary_ws.append([meta, mean, sessions, total_h, round(avg_h, 2)])
    summary_ws.cell(2, 2).number_format = "0.00"

    for c in summary_ws[2]:
        c.font = Font(name="Aptos", size=9)
        c.alignment = Alignment("left", "center")

    col_widths = {"A":30, "B":13, "C":16, "D":22, "E":19}
    for col, w in col_widths.items():
        summary_ws.column_dimensions[col].width = w

def get_normalized_metadata(rows, meta_index, prefix):
    metas = [r[meta_index] for r in rows if r[meta_index]]
    parts = [re.search(r'_(\d{4})thru(\d{4})_(\d{4})', m) for m in metas if m]
    earliest = min(p.group(1) for p in parts if p)
    latest = max(p.group(2) for p in parts if p)
    year = parts[0].group(3) if parts else "????"
    return f"{prefix}_{earliest}thru{latest}_{year}"

def add_sample_summary_sheet(wb: Workbook, metrics_ws: Worksheet) -> None:
  if SAMPLE_SUMMARY_WORKSHEET_NAME in wb.sheetnames:
    del wb[SAMPLE_SUMMARY_WORKSHEET_NAME]
  ws = wb.create_sheet(SAMPLE_SUMMARY_WORKSHEET_NAME)
  headers = [
    METADATA_COL_NAME,
    AVERAGE_WER_COL_NAME,
    SESSION_COUNT_COL_NAME,
    AVG_HALLUCINATION_PERCENT_COL_NAME
  ]
  for i, title in enumerate(headers, start=1):
    c = ws.cell(1, i, title)
    c.font = Font(name="Aptos", size=9, bold=True)
    c.alignment = Alignment("left", "center")

  header_map = get_column_index_map(metrics_ws)
  rows = list(metrics_ws.iter_rows(min_row=2, values_only=True))

  wer_index = header_map[WER_COL_NAME] - 1
  hallucination_index = header_map[HALLUCINATION_PERCENT_COL_NAME] - 1
  section_index = header_map[SECTION_COL_NAME] - 1
  meta_index = header_map[METADATA_COL_NAME] - 1

  if CALL_LEVEL_GRANULARITY:
    wer_vals = [r[wer_index] for r in rows if
                r[section_index] == ENTIRE_COL_NAME and isinstance(r[wer_index], (int, float))]
    halluc_vals = [r[hallucination_index] for r in rows if
                   r[section_index] == ENTIRE_COL_NAME and isinstance(r[hallucination_index], (int, float))]
  else:
    wer_vals = [r[wer_index] for r in rows if
                r[section_index] != ENTIRE_COL_NAME and isinstance(r[wer_index], (int, float))]
    halluc_vals = [r[hallucination_index] for r in rows if
                   r[section_index] != ENTIRE_COL_NAME and isinstance(r[hallucination_index], (int, float))]

  avg_wer = sum(wer_vals) / len(wer_vals) if wer_vals else 0.0
  avg_hp = sum(halluc_vals) / len(halluc_vals) if halluc_vals else 0.0

  metas = [r[meta_index] for r in rows if r[meta_index]]
  parts = [re.search(r'_(\d{4})thru(\d{4})_(\d{4})', m) for m in metas if m]
  earliest = min(p.group(1) for p in parts if p)
  latest = max(p.group(2) for p in parts if p)
  year = parts[0].group(3) if parts else "????"
  meta = f"{SPREADSHEET_PREFIX}_{earliest}thru{latest}_{year}"

  num_sessions = sum(1 for r in rows if r[section_index] == ENTIRE_COL_NAME)

  summary_vals = [meta, avg_wer, num_sessions, avg_hp]
  for i, val in enumerate(summary_vals, start=1):
    c = ws.cell(2, i, val)
    c.font = Font(name="Aptos", size=9)
    c.alignment = Alignment("left", "center")
    c.fill = PatternFill(
      "solid",
      fgColor=CALL_LEVEL_BKGND_COLOR if CALL_LEVEL_GRANULARITY else SAMPLE_LEVEL_BKGND_COLOR
    )
    c.border = THIN_BORDER

  col_widths = {"A": 30, "B": 13, "C": 16, "D": 22}
  for col, w in col_widths.items():
    ws.column_dimensions[col].width = w

def OLD_add_monthly_input_data_worksheet(wb: Workbook, metrics_files: list[str]) -> None:
    ws_input = wb.create_sheet("input-data")
    first = True

    for mf in metrics_files:
      wbf = load_workbook(mf)
      input_ws_name = next(n for n in wbf.sheetnames if n.startswith(WORKSHEET_PREFIX))
      ws = wbf[input_ws_name]

      for i, row in enumerate(ws.iter_rows(values_only=True), start=1):
        if i == 1 and not first: continue
        ws_input.append(row)
      first = False

    ws_input.freeze_panes = "A2"
    ws_input.auto_filter.ref = f"A1:{get_column_letter(ws_input.max_column)}{ws_input.max_row}"

    for col in range(1, ws_input.max_column + 1):
      col_letter = get_column_letter(col)
      ws_input.column_dimensions[col_letter].width = 35

    for cell in ws_input[1]:
      cell.font = Font(name="Aptos", size=9, bold=True)

def add_monthly_input_data_worksheet(wb: Workbook, metrics_files: list[str]) -> None:
  ws_input = wb.create_sheet(INPUT_DATA_WORKSHEET_NAME, 0)
  first = True

  for mf in metrics_files:
    wbf = load_workbook(mf)
    input_ws_name = next(n for n in wbf.sheetnames if n.startswith(WORKSHEET_PREFIX))
    ws = wbf[input_ws_name]
    meta = os.path.splitext(os.path.basename(mf))[0]

    for i, row in enumerate(ws.iter_rows(values_only=True), start=1):
      if i == 1:
        if first:
          ws_input.append(["metadata"] + list(row))
          first = False
        continue
      ws_input.append([meta] + list(row))

  ws_input.freeze_panes = "A2"
  ws_input.auto_filter.ref = f"A1:{get_column_letter(ws_input.max_column)}{ws_input.max_row}"

  for col in range(1, ws_input.max_column + 1):
    col_letter = get_column_letter(col)
    ws_input.column_dimensions[col_letter].width = 35

  for cell in ws_input[1]:
    cell.font = Font(name="Aptos", size=9, bold=True)

def get_monthly_filepath(root_dir: str, metrics_files: list[str], prefix: str) -> tuple[str, str, str, str]:
    dates = []
    for path in metrics_files:
        base = os.path.basename(path).rsplit(".", 1)[0]
        parts = base.split("_")
        rng, year = parts[1], parts[2]
        start, end = re.split(r'thru|-', rng, maxsplit=1)
        dates.append((start, end, year))
    earliest = min(d[0] for d in dates)
    latest   = max(d[1] for d in dates)
    year     = dates[0][2]
    filename = f"{prefix}_{earliest}thru{latest}_{year}_monthly_metrics.xlsx"
    return os.path.join(root_dir, filename), earliest, latest, year

def OLD_create_monthly_worksheet(root_dir: str, metrics_files: list[str], prefix: str) -> str:
    monthly_path, earliest, latest, year = get_monthly_filepath(root_dir, metrics_files, prefix)
    if os.path.exists(monthly_path):
        os.remove(monthly_path)

    wb = Workbook()
    del wb[wb.sheetnames[0]]

    monthly_metrics = wb.create_sheet(METRICS_WORKSHEET_NAME)
    first = True
    for mf in metrics_files:
        wbf = load_workbook(mf)
        wsf = wbf[METRICS_WORKSHEET_NAME]
        for i, row in enumerate(wsf.iter_rows(values_only=True), start=1):
            if i == 1 and not first: continue
            monthly_metrics.append(row)
        first = False

    for c in monthly_metrics[1]:
        c.font = Font(name="Aptos", size=9, bold=True)
        c.alignment = Alignment("left", "center")
    monthly_metrics.freeze_panes = "A2"
    monthly_metrics.auto_filter.ref = f"A1:{get_column_letter(monthly_metrics.max_column)}{monthly_metrics.max_row}"
    for col, w in {"A":27, "B":65, "C":9, "D":63, "E":63, "F":8, "G":12, "H":10, "I":15}.items():
        monthly_metrics.column_dimensions[col].width = w
    hdr_map = get_column_index_map(monthly_metrics)
    wi = hdr_map[WER_COL_NAME] - 1
    hi = hdr_map[HALLUCINATION_PERCENT_COL_NAME] - 1
    si = hdr_map[SECTION_COL_NAME] - 1
    for r in monthly_metrics.iter_rows(min_row=2):
        if r[wi].value is not None:
            r[wi].number_format = "0.00"
        if r[hi].value is not None:
            r[hi].number_format = "0.00000"
        if r[si].value == ENTIRE_COL_NAME:
            for c in r: c.fill, c.border = PatternFill("solid", fgColor=CALL_LEVEL_BKGND_COLOR), THIN_BORDER
        else:
            for c in r: c.fill, c.border = PatternFill("solid", fgColor=SAMPLE_LEVEL_BKGND_COLOR), THIN_BORDER

    mon_sum = wb.create_sheet(WEEKLY_SUMMARY_WORKSHEET_NAME)
    first = True
    for mf in metrics_files:
        wbf = load_workbook(mf)
        wsf = wbf[WEEKLY_SUMMARY_WORKSHEET_NAME]
        for i, row in enumerate(wsf.iter_rows(values_only=True), start=1):
            if i == 1 and not first: continue
            mon_sum.append(row)
        first = False

    for c in mon_sum[1]:
        c.font = Font(name="Aptos", size=9, bold=True)
        c.alignment = Alignment("left", "center")
    mon_sum.freeze_panes = "A2"
    mon_sum.auto_filter.ref = f"A1:{get_column_letter(mon_sum.max_column)}{mon_sum.max_row}"
    for col, w in {"A":36, "B":11, "C":14, "D":19, "E":17}.items():
        mon_sum.column_dimensions[col].width = w

    mon_sum.append([None] * 5)
    entries = list(mon_sum.iter_rows(min_row=2, max_row=1+len(metrics_files), values_only=True))
    avg_wers = [r[1] for r in entries]
    num_sess = sum(int(r[2]) for r in entries)
    total_h  = sum(int(r[3]) for r in entries)
    avg_h    = round(total_h / num_sess, 2) if num_sess else 0.0

    meta_lbl = f"{prefix}_{earliest}thru{latest}_{year}"
    mon_sum.append([meta_lbl,
                    round(sum(avg_wers) / len(avg_wers), 2) if avg_wers else 0.0,
                    num_sess, total_h, avg_h])

    last = mon_sum.max_row
    fill_con = PatternFill("solid", fgColor="00FFFF")
    for row in mon_sum.iter_rows(min_row=1, max_row=last):
        for c in row:
            c.font = Font(name="Aptos", size=9, bold=(c.row == 1))
            if c.row == last:
                c.fill = fill_con
                c.border = THIN_BORDER

    add_sample_summary_sheet(wb, monthly_metrics)
    add_monthly_input_data_worksheet(wb, metrics_files)
    wb.save(monthly_path)
    return monthly_path

def create_monthly_worksheet(root_dir: str, metrics_files: list[str], prefix: str) -> str:
  monthly_path, earliest, latest, year = get_monthly_filepath(root_dir, metrics_files, prefix)
  if os.path.exists(monthly_path):
    os.remove(monthly_path)

  wb = Workbook()
  del wb[wb.sheetnames[0]]

  # 1. Add input-data as the first worksheet
  add_monthly_input_data_worksheet(wb, metrics_files)

  # 2. Add metrics worksheet
  monthly_metrics = wb.create_sheet(METRICS_WORKSHEET_NAME)
  first = True
  for mf in metrics_files:
    wbf = load_workbook(mf)
    wsf = wbf[METRICS_WORKSHEET_NAME]
    for i, row in enumerate(wsf.iter_rows(values_only=True), start=1):
      if i == 1 and not first: continue
      monthly_metrics.append(row)
    first = False

  for c in monthly_metrics[1]:
    c.font = Font(name="Aptos", size=9, bold=True)
    c.alignment = Alignment("left", "center")
  monthly_metrics.freeze_panes = "A2"
  monthly_metrics.auto_filter.ref = f"A1:{get_column_letter(monthly_metrics.max_column)}{monthly_metrics.max_row}"
  for col, w in {"A": 27, "B": 65, "C": 9, "D": 63, "E": 63, "F": 8, "G": 12, "H": 10, "I": 15}.items():
    monthly_metrics.column_dimensions[col].width = w
  hdr_map = get_column_index_map(monthly_metrics)
  wi = hdr_map[WER_COL_NAME] - 1
  hi = hdr_map[HALLUCINATION_PERCENT_COL_NAME] - 1
  si = hdr_map[SECTION_COL_NAME] - 1
  for r in monthly_metrics.iter_rows(min_row=2):
    if r[wi].value is not None:
      r[wi].number_format = "0.00"
    if r[hi].value is not None:
      r[hi].number_format = "0.00000"
    if r[si].value == ENTIRE_COL_NAME:
      for c in r: c.fill, c.border = PatternFill("solid", fgColor=CALL_LEVEL_BKGND_COLOR), THIN_BORDER
    else:
      for c in r: c.fill, c.border = PatternFill("solid", fgColor=SAMPLE_LEVEL_BKGND_COLOR), THIN_BORDER

  # 3. Add sample summary worksheet
  add_sample_summary_sheet(wb, monthly_metrics)

  wb.save(monthly_path)
  return monthly_path

def main() -> None:
    input_files = list_input_spreadsheets(ROOT_DIR)
    metrics_files: list[str] = []

    for inp in input_files:
        wb_in = load_workbook(inp)
        ws_name = next(n for n in wb_in.sheetnames if n.startswith(WORKSHEET_PREFIX))
        in_ws = wb_in[ws_name]

        out_path = get_name_of_results_spreadsheet(inp)
        if os.path.exists(out_path): os.remove(out_path)

        wb_out = Workbook()
        copy_ws = wb_out.active
        copy_ws.title = ws_name
        for row in in_ws.iter_rows(values_only=True): copy_ws.append(row)

        copy_ws.column_dimensions['A'].width = 69
        copy_ws.column_dimensions['B'].width = 35
        copy_ws.column_dimensions['C'].width = 35
        copy_ws.column_dimensions['D'].width = 12
        copy_ws.freeze_panes = "A2"
        copy_ws.auto_filter.ref = f"A1:D{copy_ws.max_row}"
        for row in copy_ws.iter_rows(min_row=1, max_row=copy_ws.max_row, min_col=1, max_col=4):
            for cell in row:
                cell.font = Font(name="Aptos", size=9, bold=(cell.row == 1))

        monthly_worksheet = add_metrics_sheet(wb_out)
        write_header(monthly_worksheet)
        metadata = os.path.basename(inp).rsplit(".", 1)[0]
        process_sessions(in_ws, monthly_worksheet, metadata)

        style_columns(monthly_worksheet)
        summary_worksheet = add_summary_sheet(wb_out)
        write_summary(monthly_worksheet, summary_worksheet)
        add_sample_summary_sheet(wb_out, monthly_worksheet)

        wb_out.save(out_path)
        metrics_files.append(out_path)
        print(f"{len(metrics_files)}/{len(input_files)} ... Saved metrics & summary to {out_path}")

    if DO_MONTHLY_CONSOLIDATION and metrics_files:
        monthly_path = create_monthly_worksheet(ROOT_DIR, metrics_files, SPREADSHEET_PREFIX)
        print(f"Saved monthly consolidated metrics to {monthly_path}")

if __name__ == "__main__":
    main()