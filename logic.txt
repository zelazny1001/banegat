# wer_1_hyp_alignments_to_txt.py

# wer_1_hyp_alignment_to_txt.py

from __future__ import annotations

from pathlib import Path
from openpyxl import load_workbook
from nltk_jiwer_utils import (
    get_jiwer_result,
    get_jiwer_alignment,
    write_alignment_to_file
)

SPREADSHEET_DIR = Path("j:/projects/sheet-logic/test-sheets/")
SPREADSHEET_NAME = "compute_wer_ongoing.xlsx"
TARGET_WORKSHEET = "distil-large-v2"
COLUMN_HEADERS = ["ID", "GT", "distil-large-v2-model", "model-WER"]
ALIGNMENT_DIR = Path("j:/projects/wer-test/sdi-alignments-model-only/")

def load_target_rows() -> list[dict[str, str]]:
    path = SPREADSHEET_DIR / SPREADSHEET_NAME
    workbook = load_workbook(path)
    worksheet = workbook[TARGET_WORKSHEET]
    headers = [cell.value for cell in next(worksheet.iter_rows(min_row=1, max_row=1))]
    rows = []
    for row in worksheet.iter_rows(min_row=2, values_only=True):
        row_dict = {headers[i]: str(row[i]) if row[i] is not None else "" for i in range(len(headers))}
        rows.append(row_dict)
    return rows

def generate_alignment_path(row_id: str) -> Path:
    return ALIGNMENT_DIR / f"{row_id}.txt"

def process_alignment_row(row: dict[str, str]) -> None:
    row_id = row["ID"]
    gt = row["GT"]
    hyp = row["distil-large-v2-model"]
    jiwer_result = get_jiwer_result(gt, hyp)
    alignment = get_jiwer_alignment(jiwer_result)
    write_alignment_to_file(str(generate_alignment_path(row_id)), alignment)

def main() -> None:
    ALIGNMENT_DIR.mkdir(parents=True, exist_ok=True)
    rows = load_target_rows()
    for row in rows:
        process_alignment_row(row)

if __name__ == "__main__":
    main()