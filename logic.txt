# brace_the_transcript_using_gt.py - apply braces to transcript based on ground truth.
from __future__ import annotations
import re
from openpyxl import load_workbook
from openpyxl.styles import Font
from openpyxl.utils import get_column_letter

SPREADSHEET_DIR      = "j:/tmp/braces/"
SPREADSHEET_LOCATION = SPREADSHEET_DIR + "test-braces.xlsx"
WORKSHEET_NAME       = "Sheet1"
INDECIPHERABLE_MARKER = r'(?i)\{indecipherable\}'

GROUND_TRUTH_COL = "ground_truth"
TRANSCRIPT_COL   = "transcript"
BRACED_COL       = "braced_transcript"

def collapse_spaces(text: str) -> str:
    return re.sub(r' +', ' ', text)

def is_only_marker(text: str) -> bool:
    return bool(re.fullmatch(INDECIPHERABLE_MARKER, text.strip()))

def highlight_indecipherable(source: str, target: str) -> str:
    src = collapse_spaces(source).strip()
    tgt = collapse_spaces(target).strip()
    if "{" in tgt or "}" in tgt:
        return tgt
    if is_only_marker(src):
        return f"{{{tgt}}}"
    markers = re.findall(INDECIPHERABLE_MARKER, src)
    if not markers:
        return tgt
    words_src = re.sub(r'[^\w\s]', '', src).split()
    words_tgt = re.sub(r'[^\w\s]', '', tgt).split()
    if len(markers) == 1:
        # longest common prefix (by whole words)
        i = 0
        while i < len(words_src) and i < len(words_tgt) and words_src[i].lower() == words_tgt[i].lower():
            i += 1
        # longest common suffix
        j = 0
        while j < len(words_src) - i and j < len(words_tgt) - i and \
              words_src[-1-j].lower() == words_tgt[-1-j].lower():
            j += 1
        if i == 0 and j == 0:
            return tgt
        # rebuild with original spacing and punctuation
        tgt_words = tgt.split()
        pre = " ".join(tgt_words[:i])
        suf = " ".join(tgt_words[len(tgt_words)-j:]) if j > 0 else ""
        mid = " ".join(tgt_words[i:len(tgt_words)-j or None])
        if not mid:
            return tgt
        parts = []
        if pre:
            parts.append(pre)
        parts.append(f"{{{mid}}}")
        if suf:
            parts.append(suf)
        return " ".join(parts)
    # fallback for multiple markers
    parts = re.split(INDECIPHERABLE_MARKER, src)
    if len(parts) == 2 and not parts[0].strip() and not parts[1].strip():
        return f"{{{tgt}}}"
    fixeds = [p.strip() for p in parts]
    pattern = "^" + "".join(
        re.escape(fixeds[i]) + "(.*?)"
        for i in range(len(fixeds) - 1)
    ) + re.escape(fixeds[-1]) + "$"
    m = re.match(pattern, tgt, flags=re.DOTALL)
    if not m:
        return f"{{{tgt}}}"
    groups = m.groups()
    out = fixeds[0]
    for idx, hidden in enumerate(groups, start=1):
        out += " {" + hidden.strip() + "} " + fixeds[idx]
    return out.strip()

def update_braced_transcripts(spreadsheet_path: str) -> None:
    wb = load_workbook(spreadsheet_path)
    ws = wb[WORKSHEET_NAME]
    headers = [cell.value for cell in ws[1]]
    if BRACED_COL not in headers:
        headers.append(BRACED_COL)
        ws.cell(row=1, column=len(headers), value=BRACED_COL)
    br_idx = headers.index(BRACED_COL) + 1
    gt_idx = headers.index(GROUND_TRUTH_COL) + 1
    tr_idx = headers.index(TRANSCRIPT_COL) + 1

    first_col = get_column_letter(1)
    last_col  = get_column_letter(ws.max_column)
    ws.auto_filter.ref = f"{first_col}1:{last_col}{ws.max_row}"

    col_letter = get_column_letter(br_idx)
    ws.column_dimensions[col_letter].width = 60
    ws.cell(row=1, column=br_idx).font = Font(name="Aptos", size=9, bold=True)
    ws.cell(row=1, column=gt_idx).font = Font(name="Aptos", size=9, bold=True)

    for r in range(2, ws.max_row + 1):
        source = ws.cell(row=r, column=gt_idx).value or ""
        target = ws.cell(row=r, column=tr_idx).value or ""
        cell = ws.cell(row=r, column=br_idx, value=highlight_indecipherable(source, target))
        cell.font = Font(name="Aptos", size=9)
    wb.save(spreadsheet_path)

if __name__ == "__main__":
    update_braced_transcripts(SPREADSHEET_LOCATION)