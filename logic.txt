# convert_excel_to_delimited_file.py
# convert specified columns in a target worksheet from either a .xls or .xlsx spreadsheet to a delimiter (eg. '|') separated text file

from typing import List, Tuple
from openpyxl import load_workbook
import xlrd
import os

SPREADSHEET_PATH = 'j:/projects/sheet-logic/expected-interleave-result.xlsx' #'j:/appraiseassist/data/CodeFileLists-2.xls'
WORKSHEET_TO_EXTRACT = 'analysis' # 'State Category Codes'
COLUMNS_TO_EXTRACT = ['filename', 'transcript', 'call'] # ['Code', 'Name', 'Description']

FLAT_FILE_PATH = 'j:/projects/sheet-logic/analysis-delimiter-test1.txt'
INCLUDE_HEADER = True
FLAT_FILE_DELIMITER = '|'
SPACE_AROUND_DELIMITER = True

def norm(s: str) -> str:
    return ' '.join(str(s).split()).strip().lower()

def value_to_string(v) -> str:
    if v is None:
        return ''
    if isinstance(v, float) and v.is_integer():
        return str(int(v))
    return str(v).strip()

def resolve_worksheet_name(wb, target: str):
    target_n = norm(target)
    for name in wb.sheetnames:
        if norm(name) == target_n:
            return wb[name]
    raise KeyError(f'Worksheet not found. Requested: "{target}". Available: {wb.sheetnames}')

def read_worksheet_columns(spreadsheet_path: str, worksheet_name: str, columns: List[str]) -> Tuple[List[str], List[List[str]]]:
    ext = os.path.splitext(spreadsheet_path)[1].lower()
    if ext == '.xlsx':
        wb = load_workbook(spreadsheet_path, data_only=True, read_only=True)
        ws = resolve_worksheet_name(wb, worksheet_name)
        header_cells = next(ws.iter_rows(min_row=1, max_row=1, values_only=True))
        header_map = {str(h).strip(): idx for idx, h in enumerate(header_cells) if h is not None}
        col_indices = [header_map[c] for c in columns]
        rows: List[List[str]] = []
        for row in ws.iter_rows(min_row=2, values_only=True):
            rows.append([value_to_string(row[i]) if i < len(row) else '' for i in col_indices])
        return columns, rows
    elif ext == '.xls':
        book = xlrd.open_workbook(spreadsheet_path)
        sheet = book.sheet_by_name(worksheet_name)
        headers = [value_to_string(sheet.cell_value(0, col)) for col in range(sheet.ncols)]
        col_indices = [headers.index(col) for col in columns]
        rows: List[List[str]] = []
        for row_idx in range(1, sheet.nrows):
            rows.append([value_to_string(sheet.cell_value(row_idx, col)) for col in col_indices])
        return columns, rows
    else:
        raise ValueError(f'Unsupported spreadsheet format: {ext}')

def filter_rows_for_columns(rows: List[List[str]]) -> List[List[str]]:
    return [row for row in rows if any((v or '').strip() != '' for v in row)]

def write_delimited_file(path: str, headers: List[str], rows: List[List[str]], delimiter: str, include_header: bool, space_around: bool) -> None:
    joiner = f' {delimiter} ' if space_around else delimiter
    with open(path, 'w', encoding='utf-8', newline='') as f:
        if include_header:
            f.write(joiner.join(headers) + '\n')
        for row in rows:
            f.write(joiner.join(v if v is not None else '' for v in row) + '\n')

def main() -> None:
    headers, raw_rows = read_worksheet_columns(SPREADSHEET_PATH, WORKSHEET_TO_EXTRACT, COLUMNS_TO_EXTRACT)
    rows = filter_rows_for_columns(raw_rows)
    write_delimited_file(FLAT_FILE_PATH, headers, rows, FLAT_FILE_DELIMITER, INCLUDE_HEADER, SPACE_AROUND_DELIMITER)

if __name__ == '__main__':
    main()