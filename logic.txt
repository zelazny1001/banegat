from __future__ import annotations
import os
import re

INPUT_DIRECTORY = "path/to/input_directory"
OUTPUT_DIRECTORY = "path/to/output_directory"

def read_required_files(input_directory: str) -> list[tuple[int, str]]:
    pattern = re.compile(r"whisper_transcriptions-(\d+)-second-chunks\.txt$")
    entries = []
    for fname in os.listdir(input_directory):
        m = pattern.match(fname)
        if m:
            sec = int(m.group(1))
            entries.append((sec, os.path.join(input_directory, fname)))
    entries.sort(key=lambda x: x[0])
    return entries

def concatenate_lines(entries: list[tuple[int, str]]) -> list[str]:
    lines = []
    first = True
    for _, path in entries:
        with open(path, 'r') as f:
            for i, line in enumerate(f):
                if i == 0 and not first:
                    continue
                lines.append(line)
        first = False
    return lines

def write_concatenated_file(lines: list[str], output_directory: str, first_sec: int, last_sec: int) -> str:
    fname = f"whisper_combined_transcriptions-{first_sec}-to-{last_sec}-second-chunks.txt"
    out_path = os.path.join(output_directory, fname)
    with open(out_path, 'w') as f:
        f.writelines(lines)
    return out_path

def main() -> None:
    entries = read_required_files(INPUT_DIRECTORY)
    lines = concatenate_lines(entries)
    first_sec, last_sec = entries[0][0], entries[-1][0]
    output_path = write_concatenated_file(lines, OUTPUT_DIRECTORY, first_sec, last_sec)
    print(output_path)

if __name__ == "__main__":
    main()