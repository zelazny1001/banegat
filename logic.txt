# extract_gt_from_column_format.py - from multi-column side-by-side format in excel, extract the GT columns & write to file

from __future__ import annotations
import os
import openpyxl
from typing import List, Dict, Tuple

SPREADSHEET_PATH = "j:/projects/sheet-logic/ground-truths/gt-format.xlsx"
OUTPUT_DIRECTORY = "j:/projects/sheet-logic/ground-truths/"

def get_column_groups(worksheet) -> List[Tuple[int, int, int]]:
    column_groups = []
    for col in range(1, worksheet.max_column + 1):
        cell_value = worksheet.cell(row=1, column=col).value
        if cell_value == "Filename":
            if (worksheet.cell(row=1, column=col + 1).value == "whisper_transcription" and
                    worksheet.cell(row=1, column=col + 2).value == "ground_truth"):
                column_groups.append((col, col + 1, col + 2))
    return column_groups

def extract_ground_truths(worksheet, column_groups: List[Tuple[int, int, int]]) -> Dict[str, List[str]]:
    ground_truths = {}
    for group in column_groups:
        filename_col, _, gt_col = group
        current_filename = None
        for row in range(2, worksheet.max_row + 1):
            filename_cell = worksheet.cell(row=row, column=filename_col).value
            if filename_cell and filename_cell.startswith("Synthetic_Call_"):
                current_filename = filename_cell
                if current_filename not in ground_truths:
                    ground_truths[current_filename] = []
            gt_text = worksheet.cell(row=row, column=gt_col).value
            if current_filename and gt_text and isinstance(gt_text, str):
                ground_truths[current_filename].append(gt_text.strip())
    return ground_truths

def generate_output_filename(input_filename: str) -> str:
    core = input_filename[len("Synthetic_Call_"):]
    core = core[: -len("_Combined")]
    return f"ground_truth_call_{core}.txt"

def write_ground_truth_files(ground_truths: Dict[str, List[str]], output_dir: str):
    os.makedirs(output_dir, exist_ok=True)
    for filename, lines in ground_truths.items():
        output_filename = generate_output_filename(filename)
        output_path = os.path.join(output_dir, output_filename)
        stripped_lines = [line.strip() for line in lines]
        combined_text = '\n'.join(stripped_lines)
        with open(output_path, 'w', encoding='utf-8') as f:
            f.write(combined_text)
        print(f"Created file: {output_path}")

def process_spreadsheet(spreadsheet_path: str, output_directory: str):
    workbook = openpyxl.load_workbook(spreadsheet_path)
    worksheet = workbook.active
    column_groups = get_column_groups(worksheet)
    if not column_groups:
        print("No valid column groups found in the spreadsheet.")
        return
    ground_truths = extract_ground_truths(worksheet, column_groups)
    write_ground_truth_files(ground_truths, output_directory)
    print(f"Processed {len(ground_truths)} files.")

def main():
    process_spreadsheet(SPREADSHEET_PATH, OUTPUT_DIRECTORY)

if __name__ == "__main__":
    main()
	
#========================

# create_interleaved_gt_worksheets.py - create GT speaker separated worksheets from transcript interleaving and combined GT

from pathlib import Path
from openpyxl import load_workbook, Workbook
from openpyxl.styles import Font

SPREADSHEET_DIR = Path("j:/projects/sheet-logic/")
SPREADSHEET_NAME = "wer-interleaved-test.xlsx"
INTERLEAVED = "interleaved"
GT_PREFIX = "ground_truth_call_"
GT_DIR = Path("j:/projects/sheet-logic/ground-truths/")
SPEAKER_SEPARATED_GT_DIR = Path("j:/projects/sheet-logic/speaker-separated-gt-2/")
BATCH_SIZE = 10

def read_interleaved_data(input_path, sheet_name):
    wb = load_workbook(input_path, read_only=True)
    ws = wb[sheet_name]
    headers = {cell.value: idx for idx, cell in enumerate(next(ws.rows))}
    groups = {}
    for row in ws.iter_rows(min_row=2, values_only=True):
        call_val = row[headers["call"]]
        entry = {
            "call": call_val,
            "transcript": row[headers["transcript"]],
            "speaker": row[headers["speaker"]]
        }
        groups.setdefault(call_val, []).append(entry)
    return groups

def read_ground_truth_file(gt_dir, suffix):
    path = gt_dir / f"{GT_PREFIX}{suffix}.txt"
    with open(path, encoding="utf-8") as f:
        return [line.rstrip("\n") for line in f]

def split_into_batches(items, size):
    return [items[i:i+size] for i in range(0, len(items), size)]

def create_output_workbook(call_batch, data_groups, gt_dir, output_dir):
    wb = Workbook()
    wb.remove(wb.active)
    for call_key in call_batch:
        suffix = "_".join(call_key.split("_")[1:])
        ws = wb.create_sheet(title=suffix)
        ws.append(["call","transcript","speaker","speaker GT","GT"])
        gt_lines = read_ground_truth_file(gt_dir, suffix)
        rows = data_groups.get(call_key, [])
        max_rows = max(len(rows), len(gt_lines))
        for i in range(max_rows):
            if i < len(rows):
                call_cell = rows[i]["call"]
                transcript = rows[i]["transcript"]
                speaker = rows[i]["speaker"]
            else:
                call_cell = call_key
                transcript = ""
                speaker = ""
            gt_value = gt_lines[i] if i < len(gt_lines) else ""
            ws.append([call_cell, transcript, speaker, "", gt_value])
        header_font = Font(name="Aptos", size=9, bold=True)
        data_font = Font(name="Aptos", size=9)
        for cell in ws[1]:
            cell.font = header_font
        for row in ws.iter_rows(min_row=2, max_row=ws.max_row, max_col=5):
            for cell in row:
                cell.font = data_font
        ws.freeze_panes = "A2"
        ws.auto_filter.ref = f"A1:E{ws.max_row}"
    start = call_batch[0]
    end = call_batch[-1]
    file_name = f"{start}-to-{end}.xlsx"
    output_path = output_dir / file_name
    wb.save(output_path)

def main():
    input_path = SPREADSHEET_DIR / SPREADSHEET_NAME
    data_groups = read_interleaved_data(input_path, INTERLEAVED)
    call_keys = sorted(
        data_groups.keys(),
        key=lambda k: tuple(int(x) for x in k.split("_")[1:])
    )
    batches = split_into_batches(call_keys, BATCH_SIZE)
    SPEAKER_SEPARATED_GT_DIR.mkdir(parents=True, exist_ok=True)
    for batch in batches:
        create_output_workbook(batch, data_groups, GT_DIR, SPEAKER_SEPARATED_GT_DIR)

if __name__ == "__main__":
    main()