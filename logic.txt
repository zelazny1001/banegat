# consolidate_worksheets.py

from __future__ import annotations
import os
import re
import csv
from typing import List, Tuple
from openpyxl import load_workbook, Workbook
from openpyxl.styles import Font
from openpyxl.worksheet.worksheet import Worksheet

INPUT_FOLDER = "j:/projects/sheet-logic/"
OUTPUT_FOLDER = "j:/projects/scratch/"
SUB_DIRS = ["asr-april-2025"]
FILENAME_PREFIX = "ASR"
FILE_EXTENSION = ".xlsx"
COLUMNS_TO_BE_AGGREGATED = ["raw_transcript", "Ground Truth Transcript"]
AGGREGATE_WORKSHEET_NAME = FILENAME_PREFIX + "-consolidated"
AGGREGATE_SPREADSHEET_NAME = AGGREGATE_WORKSHEET_NAME + FILE_EXTENSION
COLUMN_WIDTHS = [50, 26]
CSV_EXTENSION = ".csv"
CSV_SEPARATOR = "|"

def preprocess(text: str) -> str:
    if not text:
        return ""
    s = str(text).lower()
    s = re.sub(r"[.,\-?â€¦]", " ", s)
    s = re.sub(r"\{[^}]*\}", "", s)
    s = re.sub(r"[\[\]]", "", s)
    return re.sub(r"\s+", " ", s).strip()

def fetch_input_excel_data(
    root_dir: str,
    sub_dirs: List[str],
    prefix: str,
    extension: str,
    columns: List[str],
) -> List[Tuple[str, ...]]:
    rows: list[tuple[str, ...]] = []
    for sub in sub_dirs:
        path = os.path.join(root_dir, sub)
        for fname in os.listdir(path):
            if not fname.startswith(prefix) or not fname.endswith(extension):
                continue
            wb = load_workbook(os.path.join(path, fname), read_only=True, data_only=True)
            if len(wb.sheetnames) != 1:
                continue
            ws = wb[wb.sheetnames[0]]
            header = list(next(ws.iter_rows(min_row=1, max_row=1, values_only=True)))
            try:
                idxs = [header.index(col) for col in columns]
            except ValueError:
                continue
            for row in ws.iter_rows(min_row=2, values_only=True):
                raw_cells = [row[i] or "" for i in idxs]
                processed = [preprocess(cell) for cell in raw_cells]
                if any(processed):
                    rows.append(tuple(processed))
    return rows

def write_aggregate_rows_to_worksheet(
    ws: Worksheet,
    columns: List[str],
    rows: List[Tuple[str, ...]],
) -> None:
    header_font = Font(name="Arial", size=10, bold=True)
    cell_font = Font(name="Arial", size=10)
    ws.append(["index", *columns])
    for col_idx, width in enumerate(COLUMN_WIDTHS, start=2):
        letter = ws.cell(row=1, column=col_idx).column_letter
        ws.column_dimensions[letter].width = width
    for idx, row in enumerate(rows, start=1):
        ws.append((idx, *row))
    total_cols = len(columns) + 1
    for row_cells in ws.iter_rows(min_row=1, max_row=ws.max_row, min_col=1, max_col=total_cols):
        for cell in row_cells:
            cell.font = header_font if cell.row == 1 else cell_font
    ws.freeze_panes = "A2"
    last_col = ws.cell(row=1, column=total_cols).column_letter
    ws.auto_filter.ref = f"A1:{last_col}{ws.max_row}"

def save_aggregate_rows_to_spreadsheet(
    root_dir: str,
    filename: str,
    sheet_name: str,
    columns: List[str],
    rows: List[Tuple[str, ...]],
) -> None:
    wb = Workbook()
    ws = wb.active
    ws.title = sheet_name
    write_aggregate_rows_to_worksheet(ws, columns, rows)
    wb.save(os.path.join(root_dir, filename))

def write_to_csv(
    root_dir: str,
    xlsx_filename: str,
    columns: List[str],
    rows: List[Tuple[str, ...]],
) -> None:
    base = os.path.splitext(xlsx_filename)[0]
    csv_name = base + CSV_EXTENSION
    csv_path = os.path.join(root_dir, csv_name)
    with open(csv_path, "w", newline="", encoding="utf-8") as f:
        writer = csv.writer(f, delimiter=CSV_SEPARATOR)
        writer.writerow(["index", *columns])
        for idx, row in enumerate(rows, start=1):
            writer.writerow([idx, *row])

def main() -> None:
    rows = fetch_input_excel_data(
        INPUT_FOLDER,
        SUB_DIRS,
        FILENAME_PREFIX,
        FILE_EXTENSION,
        COLUMNS_TO_BE_AGGREGATED,
    )
    if rows:
        save_aggregate_rows_to_spreadsheet(
            OUTPUT_FOLDER,
            AGGREGATE_SPREADSHEET_NAME,
            AGGREGATE_WORKSHEET_NAME,
            COLUMNS_TO_BE_AGGREGATED,
            rows,
        )
        write_to_csv(
            OUTPUT_FOLDER,
            AGGREGATE_SPREADSHEET_NAME,
            COLUMNS_TO_BE_AGGREGATED,
            rows,
        )

if __name__ == "__main__":
    main()