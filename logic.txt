# upsert_wer_interleaved_worksheet.py

import os
import httpx
from openpyxl import load_workbook
from openpyxl.styles import Font
from openpyxl.utils import get_column_letter

SPREADSHEET_DIRECTORY = "j:/projects/sheet-logic/"
SPREADSHEET_FILENAME = "wer-interleaved-test.xlsx"
INTERLEAVED_WORKSHEET = "interleaved"
WER_WORKSHEET = "WER-interleaved"
GT_LOCATION = "j:/projects/sheet-logic/ground-truths/"
WER_ENDPOINT = "http://api_for_wer:2517/wer"
WER_ENDPOINT_TIMEOUT = 3

CALL_COLUMN = "call"
CONDITIONS_COLUMN = "conditions"
TRANSCRIPT_COLUMN = "transcript"
GT_COLUMN = "GT"
WER_COLUMN = "WER"

COLUMN_MAPPING = {
    CALL_COLUMN: 1,
    CONDITIONS_COLUMN: 2,
    TRANSCRIPT_COLUMN: 3,
    GT_COLUMN: 4,
    WER_COLUMN: 5
}


def load_interleaved_data():
    workbook_path = os.path.join(SPREADSHEET_DIRECTORY, SPREADSHEET_FILENAME)
    workbook = load_workbook(workbook_path)
    worksheet = workbook[INTERLEAVED_WORKSHEET]
    data = []
    headers = [cell.value for cell in worksheet[1]]
    for row in worksheet.iter_rows(min_row=2, values_only=True):
        data.append(dict(zip(headers, row)))
    return data


def create_or_replace_worksheet():
    workbook_path = os.path.join(SPREADSHEET_DIRECTORY, SPREADSHEET_FILENAME)
    workbook = load_workbook(workbook_path)
    if WER_WORKSHEET in workbook.sheetnames:
        workbook.remove(workbook[WER_WORKSHEET])
    workbook.create_sheet(WER_WORKSHEET)
    workbook.save(workbook_path)

def group_interleaved_data(interleaved_data):
    grouped = {}
    for row in interleaved_data:
        call = row[CALL_COLUMN]
        conditions = row[CONDITIONS_COLUMN]
        transcript = row[TRANSCRIPT_COLUMN]
        if call not in grouped:
            grouped[call] = {"conditions": conditions, "transcripts": []}
        grouped[call]["transcripts"].append(transcript)
    return grouped

def get_ground_truth_text(call):
    gt_filename = f"ground_truth_{call}.txt"
    gt_path = os.path.join(GT_LOCATION, gt_filename)
    try:
        with open(gt_path, "r") as file:
            return file.read().strip()
    except FileNotFoundError:
        return "No Ground Truth found"

def calculate_wer(ground_truth, transcript):
    if ground_truth == "No Ground Truth found":
        return float("100.00")
    try:
        resp = httpx.post(WER_ENDPOINT,
                          json={"groundTruth": ground_truth, "transcript": transcript},
                          timeout=WER_ENDPOINT_TIMEOUT)
        text = resp.text.strip()
        value = float(text)
        return f"{value:.2f}"
    except (ValueError, httpx.RequestError):
        return "WER API Error"


def populate_wer_interleaved_worksheet(grouped_data):
    workbook_path = os.path.join(SPREADSHEET_DIRECTORY, SPREADSHEET_FILENAME)
    workbook = load_workbook(workbook_path)
    worksheet = workbook[WER_WORKSHEET]

    worksheet.append([CALL_COLUMN, CONDITIONS_COLUMN, TRANSCRIPT_COLUMN, GT_COLUMN, WER_COLUMN])

    for call, data in grouped_data.items():
        transcript = " ".join(data["transcripts"])
        gt_text = get_ground_truth_text(call)
        wer_value = calculate_wer(gt_text, transcript)
        worksheet.append([call, data["conditions"], transcript, gt_text, wer_value])

    apply_worksheet_styling(workbook, worksheet)
    workbook.save(workbook_path)


def apply_worksheet_styling(workbook, worksheet):
    aptos_font = Font(name="Aptos", size=9)
    for row in worksheet.iter_rows():
        for cell in row:
            cell.font = aptos_font

    for cell in worksheet[1]:
        cell.font = Font(bold=True)

    worksheet.freeze_panes = f"A2"
    worksheet.auto_filter.ref = worksheet.dimensions

    interleaved_worksheet = workbook[INTERLEAVED_WORKSHEET]
    transcript_width = interleaved_worksheet.column_dimensions[get_column_letter(
        [cell.value for cell in interleaved_worksheet[1]].index(TRANSCRIPT_COLUMN) + 1
    )].width
    call_width = interleaved_worksheet.column_dimensions[get_column_letter(
        [cell.value for cell in interleaved_worksheet[1]].index(CALL_COLUMN) + 1
    )].width
    conditions_width = interleaved_worksheet.column_dimensions[get_column_letter(
        [cell.value for cell in interleaved_worksheet[1]].index(CONDITIONS_COLUMN) + 1
    )].width

    worksheet.column_dimensions[get_column_letter(COLUMN_MAPPING[CALL_COLUMN])].width = call_width
    worksheet.column_dimensions[get_column_letter(COLUMN_MAPPING[CONDITIONS_COLUMN])].width = conditions_width
    worksheet.column_dimensions[get_column_letter(COLUMN_MAPPING[TRANSCRIPT_COLUMN])].width = transcript_width
    worksheet.column_dimensions[get_column_letter(COLUMN_MAPPING[GT_COLUMN])].width = transcript_width
    worksheet.column_dimensions[get_column_letter(COLUMN_MAPPING[WER_COLUMN])].width = 7


def process_wer_interleaved():
    create_or_replace_worksheet()
    interleaved_data = load_interleaved_data()
    grouped_data = group_interleaved_data(interleaved_data)
    populate_wer_interleaved_worksheet(grouped_data)

if __name__ == "__main__":
    process_wer_interleaved()