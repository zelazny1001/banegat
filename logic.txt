# === constants.py ===

USE_HALLUCINATION_FLAGS: bool = False
CODE_IS_BEING_TESTED: bool = True

ROOT_DIR: str = "j:/projects/sheet-logic/asr-april-2025-data/"
SPREADSHEET_PREFIX: str = "ASR"
WORKSHEET_PREFIX: str = "ASR"
METRICS_CONDITION_TEMPLATE = "metrics-condition-template.xlsx"
DO_MONTHLY_CONSOLIDATION: bool = True
CALL_LEVEL_GRANULARITY: bool = True # False means sample level granularity
AVERAGING_PERIOD = "weekly" # or "monthly"

SESSION_ID_COL_NAME: str = "session_id"
RAW_TRANSCRIPT_COL_NAME: str = "raw_transcript"
GROUND_TRUTH_COL_NAME: str = "Ground Truth Transcript"
HALLUCINATION_COL_NAME: str = "Hallucination"

INPUT_DATA_WORKSHEET_NAME: str = "input-data"

METRICS_WORKSHEET_NAME: str = "metrics"
METADATA_COL_NAME: str = "metadata"
SECTION_COL_NAME: str = "section"
ENTIRE_COL_NAME: str = "entire"
GT_SECTION_TEXT_COL_NAME: str = "gt section"
MODEL_SECTION_TEXT_COL_NAME: str = "model text"
WER_COL_NAME: str = "WER"
HALLUCINATION_COUNT_COL_NAME: str = "Hallucination"
GT_TOKS_COL_NAME: str = "GT Toks"
HALLUCINATION_PERCENT_COL_NAME: str = "Hallucination %"

NUMBER_OF_SECTIONS: int = 5
WER_POST_ENDPOINT: str = "https://wer_host:3281/word_error_rate"
WER_ALGORITHM = "nltk"

WEEKLY_SUMMARY_WORKSHEET_NAME: str = "weekly-summary"
MONTHLY_SUMMARY_WORKSHEET_NAME: str = "monthly-summary"

AVERAGE_WER_COL_NAME: str = "AVG_WER"
SESSION_COUNT_COL_NAME: str = "num sessions"
SUMMARY_HALLUCINATION_COUNT_COL_NAME: str = "Hallucination Count"
HALLUCINATION_AVG_COL_NAME: str = "Hallucination Avg"
AVG_HALLUCINATION_PERCENT_COL_NAME: str = "Avg Hallucination %"

CALL_LEVEL_BKGND_COLOR: str = "00FFFF"
SAMPLE_LEVEL_BKGND_COLOR: str = "FFFFFF"
SOURCE_COL_WIDTHS = {"A": 69, "B": 35, "C": 35, "D": 12}
METRICS_HEADER_COL_WIDTHS = {"A": 27, "B": 65, "C": 9, "D": 63, "E": 63, "F": 8, "G": 12, "H": 10, "I": 15}
SUMMARY_COL_WIDTHS = {"A": 30, "B": 13, "C": 16, "D": 22}


# metrics_conditions.py

from openpyxl import load_workbook
from openpyxl.worksheet.worksheet import Worksheet
from openpyxl.workbook import Workbook
from openpyxl.styles import Font

from constants import (
    METRICS_CONDITION_TEMPLATE,
    CALL_LEVEL_GRANULARITY,
    AVERAGING_PERIOD,
    WER_ALGORITHM,
    WER_POST_ENDPOINT,
    USE_HALLUCINATION_FLAGS
)

# template spreadsheet headers. these must only be changed from "metrics-conditioin-template.xlsx"
FACTOR_HEADER = "Factor"
OMR_REQUIRES_HEADER = "OMR Requires"
GENERATED_USING_HEADER = "Generated Using"

# template worksheet rows under column 1. these must only be changed from "metrics-conditioin-template.xlsx"
GRANULARITY_ROW = "Granularity"
AVERAGING_PERIOD_ROW = "Averaging Period"
WER_ALGORITHM_ROW = "WER Algorithm"
WER_LOCATION_ROW = "WER Compute Location"
HALLUCINATION_GRANULARITY_ROW = "Hallucination Granularity"

CONDITION_COL_WIDTHS = {"A": 23, "B": 23, "C": 36}

def append_metrics_conditions_worksheet(conditions_template_workbook: Workbook) -> None:
    source_workbook = load_workbook(METRICS_CONDITION_TEMPLATE)
    source_worksheet = source_workbook.active
    destination_worksheet = conditions_template_workbook.create_sheet(title=source_worksheet.title)

    for row in source_worksheet.iter_rows(values_only=True):
        destination_worksheet.append(list(row))

    factor_column = get_column_index(destination_worksheet, FACTOR_HEADER)
    generated_using_column = get_column_index(destination_worksheet, GENERATED_USING_HEADER)

    for row in destination_worksheet.iter_rows(min_row=2):
        factor_cell = row[factor_column - 1]
        generated_using_cell = row[generated_using_column - 1]
        factor = str(factor_cell.value).strip()

        if factor == GRANULARITY_ROW:
            generated_using_cell.value = "at call level" if CALL_LEVEL_GRANULARITY else "at sample level"
        elif factor == AVERAGING_PERIOD_ROW:
            generated_using_cell.value = AVERAGING_PERIOD
        elif factor == WER_ALGORITHM_ROW:
            generated_using_cell.value = WER_ALGORITHM
        elif factor == WER_LOCATION_ROW:
            generated_using_cell.value = WER_POST_ENDPOINT
        elif factor == HALLUCINATION_GRANULARITY_ROW:
            generated_using_cell.value = "Hallucination Flags" if USE_HALLUCINATION_FLAGS else "token"

    for row in destination_worksheet.iter_rows():
        for cell in row:
            cell.font = Font(name="Aptos", size=9, bold=(cell.row == 1))

    for col_letter, width in CONDITION_COL_WIDTHS.items():
        destination_worksheet.column_dimensions[col_letter].width = width

def get_column_index(ws: Worksheet, header_name: str) -> int:
    for index, cell in enumerate(ws[1], start=1):
        if str(cell.value).strip() == header_name:
            return index
    raise ValueError(f"Header '{header_name}' not found.")
	

#==== weekly_summary.py ====

from __future__ import annotations
from collections import defaultdict
from openpyxl.worksheet.worksheet import Worksheet
from openpyxl.styles import Font, PatternFill
from constants import (
    METADATA_COL_NAME,
    AVERAGE_WER_COL_NAME,
    SESSION_COUNT_COL_NAME,
    AVG_HALLUCINATION_PERCENT_COL_NAME,
    ENTIRE_COL_NAME,
    WER_COL_NAME,
    HALLUCINATION_PERCENT_COL_NAME,
    WEEKLY_SUMMARY_WORKSHEET_NAME,
    AVERAGING_PERIOD,
    SPREADSHEET_PREFIX,
    CALL_LEVEL_BKGND_COLOR,
)
from styling import set_weekly_summary_column_widths
from overall_summary import normalize_metadata

def add_weekly_summary_sheet(workbook) -> Worksheet:
    if WEEKLY_SUMMARY_WORKSHEET_NAME in workbook.sheetnames:
        del workbook[WEEKLY_SUMMARY_WORKSHEET_NAME]
    return workbook.create_sheet(WEEKLY_SUMMARY_WORKSHEET_NAME)

def OLD_write_weekly_summary(metrics_worksheet: Worksheet, summary_worksheet: Worksheet) -> None:
    write_weekly_summary_header(summary_worksheet)
    summaries = extract_metadata_groups(metrics_worksheet)
    write_weekly_summary_rows(summary_worksheet, summaries, start_row=3)
    write_weekly_summary_final_row(summary_worksheet, summaries)
    set_weekly_summary_column_widths(summary_worksheet)

def write_weekly_summary(metrics_worksheet: Worksheet, summary_worksheet: Worksheet) -> None:
  write_weekly_summary_header(summary_worksheet)
  if AVERAGING_PERIOD == "monthly":
    metadata_summaries = extract_metadata_groups(metrics_worksheet)
    write_weekly_summary_rows(summary_worksheet, metadata_summaries, start_row=3)
    write_weekly_summary_final_row(summary_worksheet, metadata_summaries)
  else: # weekly
    weekly_summaries = extract_metadata_groups(metrics_worksheet)
    write_weekly_summary_rows(summary_worksheet, weekly_summaries, start_row=3)
    header_map = {c.value: idx for idx, c in enumerate(summary_worksheet[1], start=1)}
    meta_index = header_map[METADATA_COL_NAME] - 1
    avg_wer_index = header_map[AVERAGE_WER_COL_NAME] - 1
    avg_hallucination_index = header_map[AVG_HALLUCINATION_PERCENT_COL_NAME] - 1
    summaries_from_sheet: dict[str, list[tuple[float, float]]] = {}
    for row in summary_worksheet.iter_rows(min_row=3, values_only=True):
      meta_label = row[meta_index]
      if not meta_label:
        continue
      w = row[avg_wer_index]
      h = row[avg_hallucination_index]
      summaries_from_sheet.setdefault(meta_label, []).append((w, h))
    write_weekly_summary_final_row(summary_worksheet, summaries_from_sheet)

  set_weekly_summary_column_widths(summary_worksheet)

def write_weekly_summary_header(summary_worksheet: Worksheet) -> None:
    titles = [METADATA_COL_NAME, AVERAGE_WER_COL_NAME, SESSION_COUNT_COL_NAME, AVG_HALLUCINATION_PERCENT_COL_NAME]
    for index, title in enumerate(titles, start=1):
        cell = summary_worksheet.cell(1, index, title)
        cell.font = Font(name="Aptos", size=9, bold=True)

def extract_metadata_groups(metrics_worksheet: Worksheet) -> dict[str, list[tuple[float, float]]]:
    header_map = {c.value: idx for idx, c in enumerate(metrics_worksheet[1], start=1)}
    metadata_index = header_map[METADATA_COL_NAME] - 1
    wer_index = header_map[WER_COL_NAME] - 1
    hallucination_percent_index = header_map[HALLUCINATION_PERCENT_COL_NAME] - 1
    section_index = header_map["section"] - 1
    groups = defaultdict(list)
    for row in metrics_worksheet.iter_rows(min_row=2, values_only=True):
        if row[section_index] == ENTIRE_COL_NAME:
            metadata_value = str(row[metadata_index])
            wer_value = row[wer_index]
            hallucination_value = row[hallucination_percent_index]
            if wer_value is not None:
                groups[metadata_value].append((wer_value, hallucination_value))
    return groups

def write_weekly_summary_rows(summary_worksheet: Worksheet, summaries: dict[str, list[tuple[float, float]]], start_row: int) -> None:
    for row_offset, (metadata_value, rows) in enumerate(summaries.items(), start=start_row):
        wer_values = [w for w, _ in rows]
        hallucination_values = [h for _, h in rows if h is not None]
        average_wer = round(sum(wer_values) / len(wer_values), 4) if wer_values else None
        average_hallucination = round(sum(hallucination_values) / len(hallucination_values), 5) if hallucination_values else None
        count = len(wer_values)
        summary_worksheet.cell(row_offset, 1, metadata_value)
        summary_worksheet.cell(row_offset, 2, average_wer)
        summary_worksheet.cell(row_offset, 3, count)
        summary_worksheet.cell(row_offset, 4, average_hallucination)
        for col in range(1, 5):
            summary_worksheet.cell(row_offset, col).font = Font(name="Aptos", size=9)

def write_weekly_summary_final_row(summary_worksheet: Worksheet, summaries: dict[str, list[tuple[float, float]]]) -> None:
    all_rows = []
    for metadata_value, rows in summaries.items():
        for row in rows:
            all_rows.append((metadata_value, *row))
    wer_values = [row[1] for row in all_rows]
    hallucination_values = [row[2] for row in all_rows if row[2] is not None]
    total_sessions = len(all_rows)
    average_wer = round(sum(wer_values) / len(wer_values), 4) if wer_values else None
    average_hallucination = round(sum(hallucination_values) / len(hallucination_values), 5) if hallucination_values else None
    metadata_rows_only = [[row[0] for row in all_rows]]
    normalized_metadata = normalize_metadata(metadata_rows_only, 0, SPREADSHEET_PREFIX)
    final_row_index = len(summaries) + 4
    summary_worksheet.cell(final_row_index, 1, normalized_metadata)
    summary_worksheet.cell(final_row_index, 2, average_wer)
    summary_worksheet.cell(final_row_index, 3, total_sessions)
    summary_worksheet.cell(final_row_index, 4, average_hallucination)
    for col in range(1, 5):
        cell = summary_worksheet.cell(final_row_index, col)
        cell.font = Font(name="Aptos", size=9)
        cell.fill = PatternFill("solid", fgColor=CALL_LEVEL_BKGND_COLOR)

        header_value = summary_worksheet.cell(1, col).value
        if header_value == WER_COL_NAME:
            cell.number_format = "0.00"
        if header_value == HALLUCINATION_PERCENT_COL_NAME:
            cell.number_format = "0.00000"
			
# monthly_aggregation_and_summary.py

from __future__ import annotations
import os
import re
from typing import Optional, Tuple
from openpyxl import load_workbook, Workbook
from openpyxl.styles import Font, Alignment
from openpyxl.utils import get_column_letter
from constants import (
    ROOT_DIR,
    WORKSHEET_PREFIX,
    SPREADSHEET_PREFIX,
    METRICS_WORKSHEET_NAME,
    METRICS_HEADER_COL_WIDTHS
)
from styling import style_copied_input_worksheet, style_metrics_header, format_metrics_cells
from business_inputs_to_monthly import add_input_data_worksheet_with_metadata
from metrics_processing import add_metrics_sheet, write_metrics_header, compute_and_write_session_metrics
from weekly_summary import add_weekly_summary_sheet, write_weekly_summary
from overall_summary import add_overall_summary_sheet

def list_input_spreadsheets(root_dir: str) -> list[str]:
    return sorted(
        os.path.join(root_dir, name)
        for name in os.listdir(root_dir)
        if name.startswith(f"{SPREADSHEET_PREFIX}_")
        and name.lower().endswith(".xlsx")
        and not name.endswith("_metrics.xlsx")
        and not name.endswith("_monthly_metrics.xlsx")
    )

def get_results_spreadsheet_path(input_path: str) -> str:
    directory = os.path.dirname(input_path)
    base = os.path.basename(input_path).rsplit(".", 1)[0]
    return os.path.join(directory, f"{base}_metrics.xlsx")

def qualifies_for_processing(input_path: str) -> Tuple[bool, Optional[str]]:
    try:
        workbook = load_workbook(input_path, read_only=True, data_only=True, keep_links=False)
        try:
            worksheet_name = next((n for n in workbook.sheetnames if n.startswith(WORKSHEET_PREFIX)), None)
        finally:
            workbook.close()
        return (worksheet_name is not None, worksheet_name)
    except Exception:
        return (False, None)

from typing import Optional

def build_metrics_workbook_from_input(input_path: str) -> Optional[str]:
    is_valid_input, input_data_worksheet_name = qualifies_for_processing(input_path)
    if not is_valid_input or not input_data_worksheet_name:
        return None

    input_data_workbook = load_workbook(input_path, read_only=True, data_only=True, keep_links=False)
    try:
        worksheet_from_business = input_data_workbook[input_data_worksheet_name]

        output_path = get_results_spreadsheet_path(input_path)
        if os.path.exists(output_path):
            os.remove(output_path)

        output_workbook = Workbook()
        copied_input_worksheet = output_workbook.active
        copied_input_worksheet.title = input_data_worksheet_name

        for row_values in worksheet_from_business.iter_rows(values_only=True):
            copied_input_worksheet.append(row_values)

        style_copied_input_worksheet(copied_input_worksheet)

        metrics_worksheet = add_metrics_sheet(output_workbook)
        write_metrics_header(metrics_worksheet)

        metadata_value = os.path.basename(input_path).rsplit(".", 1)[0]
        compute_and_write_session_metrics(worksheet_from_business, metrics_worksheet, metadata_value)
        weekly_worksheet = add_weekly_summary_sheet(output_workbook)
        write_weekly_summary(metrics_worksheet, weekly_worksheet)
        add_overall_summary_sheet(output_workbook, metrics_worksheet)
        output_workbook.save(output_path)
        return output_path
    finally:
        input_data_workbook.close()


def get_monthly_output_filepath(root_dir: str, metrics_paths: list[str], prefix: str) -> tuple[str, str, str, str]:
    dates = []
    for metrics_path in metrics_paths:
        base = os.path.basename(metrics_path).rsplit(".", 1)[0]
        parts = base.split("_")
        rng, year = parts[1], parts[2]
        start, end = re.split(r"thru|-", rng, maxsplit=1)
        dates.append((start, end, year))
    earliest = min(d[0] for d in dates)
    latest = max(d[1] for d in dates)
    year = dates[0][2]
    filename = f"{prefix}_{earliest}thru{latest}_{year}_monthly_metrics.xlsx"
    return os.path.join(root_dir, filename), earliest, latest, year

def create_monthly_workbook(root_dir: str, metrics_paths: list[str], prefix: str) -> tuple[str, Workbook]:
    monthly_path, _, _, _ = get_monthly_output_filepath(root_dir, metrics_paths, prefix)
    if os.path.exists(monthly_path):
        os.remove(monthly_path)
    monthly_workbook = Workbook()
    del monthly_workbook[monthly_workbook.sheetnames[0]]
    add_input_data_worksheet_with_metadata(monthly_workbook, metrics_paths)
    monthly_metrics_worksheet = monthly_workbook.create_sheet(METRICS_WORKSHEET_NAME)
    first = True
    for metrics_path in metrics_paths:
        metrics_wb = load_workbook(metrics_path)
        metrics_ws = metrics_wb[METRICS_WORKSHEET_NAME]
        for i, row_values in enumerate(metrics_ws.iter_rows(values_only=True), start=1):
            if i == 1 and not first:
                continue
            monthly_metrics_worksheet.append(row_values)
        first = False
    for cell in monthly_metrics_worksheet[1]:
        cell.font = Font(name="Aptos", size=9, bold=True)
        cell.alignment = Alignment("left", "center")
    monthly_metrics_worksheet.freeze_panes = "A2"
    monthly_metrics_worksheet.auto_filter.ref = f"A1:{get_column_letter(monthly_metrics_worksheet.max_column)}{monthly_metrics_worksheet.max_row}"
    for col_letter, width in METRICS_HEADER_COL_WIDTHS.items():
      monthly_metrics_worksheet.column_dimensions[col_letter].width = width
    format_metrics_cells(monthly_metrics_worksheet)
    add_overall_summary_sheet(monthly_workbook, monthly_metrics_worksheet)
    weekly_sheet = add_weekly_summary_sheet(monthly_workbook)
    write_weekly_summary(monthly_metrics_worksheet, weekly_sheet)
    monthly_workbook.save(monthly_path)
    return monthly_path, monthly_workbook