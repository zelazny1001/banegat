# asr_metrics_calc_standalone.py
# ingest all ASR_*.xlsx spreadsheets in ROOT_DIR and write per-file metrics & a consolidated monthly report

from __future__ import annotations
from typing import Tuple
import os
import re
import requests
import random

from openpyxl import load_workbook, Workbook
from openpyxl.worksheet.worksheet import Worksheet
from openpyxl.styles import Font, Alignment, PatternFill
from openpyxl.utils import get_column_letter
from openpyxl.styles import Border, Side

thin_side   = Side(border_style="thin", color="D3D3D3")
thin_border = Border(top=thin_side, bottom=thin_side, left=thin_side, right=thin_side)

CODE_IS_BEING_TESTED: bool = True

# processing parameters
ROOT_DIR: str = "j:/projects/sheet-logic/asr-april-2025-data/"
SPREADSHEET_PREFIX: str = "ASR"
WORKSHEET_PREFIX: str = "ASR"
DO_MONTHLY_CONSOLIDATION = True
CALL_LEVEL_GRANULARITY: bool = True

# input worksheet columns
SESSION_ID_COL_NAME: str         = "session_id"
RAW_TRANSCRIPT_COL_NAME: str     = "raw_transcript"
GROUND_TRUTH_COL_NAME: str       = "Ground Truth Transcript"
HALLUCINATION_COL_NAME: str      = "Hallucination"

# metrics worksheet
METRICS_WORKSHEET_NAME: str             = "metrics"
METADATA_COL_NAME: str                  = "metadata"
SECTION_COL_NAME                        = "section"
ENTIRE_COL_NAME: str                    = "entire"
GT_SECTION_TEXT_COL_NAME: str           = "gt section"
MODEL_SECTION_TEXT_COL_NAME: str        = "model text"
WER_COL_NAME                            = "WER"
HALLUCINATION_COUNT_COL_NAME: str       = "Hallucination"
GT_TOKS_COL_NAME: str                   = "GT Toks"
HALLUCINATION_PERCENT_COL_NAME: str     = "Hallucination %"

# metrics computation
NUMBER_OF_SECTIONS: int          = 5
WER_POST_ENDPOINT: str           = "https://wer_host:3281/word_error_rate"

# summary worksheet
SUMMARY_WORKSHEET_NAME: str               = "summary"
AVERAGE_WER_COL_NAME: str                 = "AVG_WER"
SESSION_COUNT_COL_NAME: str               = "num sessions"
SUMMARY_HALLUCINATION_COUNT_COL_NAME: str = "Hallucination Count"
HALLUCINATION_AVG_COL_NAME:   str         = "Hallucination Avg"

# sample summary worksheet
SAMPLE_SUMMARY: str                       = "Sample Summary"
AVG_HALLUCINATION_PERCENT_COL_NAME: str   = "Avg Hallucination %"

def list_input_spreadsheets(root_dir: str) -> list[str]:
    return sorted(
        os.path.join(root_dir, f)
        for f in os.listdir(root_dir)
        if (
            f.startswith(f"{SPREADSHEET_PREFIX}_")
            and f.lower().endswith(".xlsx")
            and not f.endswith("_metrics.xlsx")
            and not f.endswith("_monthly_metrics.xlsx")
        )
    )

def get_name_of_results_spreadsheet(input_path: str) -> str:
    dir_name = os.path.dirname(input_path)
    base = os.path.basename(input_path).rsplit(".", 1)[0]
    return os.path.join(dir_name, f"{base}_metrics.xlsx")

def preprocess_text(text: str) -> str:
    if not text:
        return ""
    s = str(text).lower()
    s = re.sub(r"[.,\-?…]", " ", s)
    s = re.sub(r"\{[^}]*\}", "", s)
    s = re.sub(r"[\[\]]", "", s)
    return re.sub(r"\s+", " ", s).strip()

def get_wer_from_api(endpoint: str, ground_truth: str, transcript: str) -> Tuple[float, int]:
    if CODE_IS_BEING_TESTED:
        return round(random.uniform(0, 100), 4), random.randint(15, 300)
    try:
        resp = requests.post(
            endpoint,
            json={"groundTruth": ground_truth, "transcript": transcript},
            verify=False,
            timeout=10
        )
        data = resp.json()
        return round(float(data[0]), 4), int(data[1])
    except Exception:
        return float('nan'), None

def add_metrics_sheet(wb: Workbook) -> Worksheet:
    if METRICS_WORKSHEET_NAME in wb.sheetnames:
        del wb[METRICS_WORKSHEET_NAME]
    return wb.create_sheet(METRICS_WORKSHEET_NAME)

def write_header(ws: Worksheet) -> None:
    headers = [
        METADATA_COL_NAME,
        SESSION_ID_COL_NAME,
        SECTION_COL_NAME,
        GT_SECTION_TEXT_COL_NAME,
        MODEL_SECTION_TEXT_COL_NAME,
        WER_COL_NAME,
        HALLUCINATION_COUNT_COL_NAME,
        GT_TOKS_COL_NAME,
        HALLUCINATION_PERCENT_COL_NAME
    ]
    for idx, title in enumerate(headers, start=1):
        cell = ws.cell(row=1, column=idx, value=title)
        cell.font = Font(name="Aptos", size=9, bold=True)
        cell.alignment = Alignment("left", "center")
    ws.freeze_panes = "A2"

def write_metrics_row(
    ws: Worksheet,
    metadata: str,
    session_id: str,
    section,
    gt_text: str,
    model_text: str,
    wer: float,
    hallucination_count: int,
    gt_tok_count: int,
    hallucination_percent: float,
    is_entire: bool = False
) -> int:
    row = ws.max_row + 1
    body_font  = Font(name="Aptos", size=9)
    body_align = Alignment("left", "center")
    fill = PatternFill("solid", fgColor="00FFFF") if is_entire else None

    vals = (metadata, session_id, section, gt_text, model_text, wer,
            hallucination_count, gt_tok_count, hallucination_percent)
    for col_idx, v in enumerate(vals, start=1):
        cell = ws.cell(row=row, column=col_idx, value=v)
        cell.font = body_font
        cell.alignment = body_align
        if fill:
            cell.fill = fill
            cell.border = thin_border
        if col_idx == 6:
            cell.number_format = "0.00"
        if col_idx == 9:
            cell.number_format = "0.00000"
    return row

def process_sessions(input_ws: Worksheet, metrics_ws: Worksheet, metadata: str) -> None:
    data = [
        row
        for row in input_ws.iter_rows(min_row=2, values_only=True)
        if str(row[0] or "").strip()
    ]
    if not data:
        print(f"No session_id found – skipping process_sessions for {metadata}")
        return

    sessions: dict[str, list[tuple[str, str]]] = {}
    for sid, raw, gt, *rest in data:
        sid = str(sid).strip()
        sessions.setdefault(sid, []).append((raw, gt))

    for sid, entries in sessions.items():
        hallucination_flags = get_hallucination_flags(input_ws, sid)

        gt_all  = " ".join(preprocess_text(gt) for _, gt in entries)
        raw_all = " ".join(preprocess_text(raw) for raw, _ in entries)
        wer_ent, gt_tok_count = get_wer_from_api(WER_POST_ENDPOINT, gt_all, raw_all)
        hallucination_count = sum(hallucination_flags)
        hallucination_percent = (100 * hallucination_count / gt_tok_count) if gt_tok_count else None
        write_metrics_row(metrics_ws, metadata, sid, ENTIRE_COL_NAME,
                          gt_all, raw_all, wer_ent, hallucination_count, gt_tok_count, hallucination_percent, True)

        total = len(entries)
        base  = total // NUMBER_OF_SECTIONS
        rem   = total % NUMBER_OF_SECTIONS
        start = 0
        for sec in range(1, NUMBER_OF_SECTIONS + 1):
            cnt = base + (1 if sec <= rem else 0)
            if cnt == 0:
                break
            block  = entries[start:start+cnt]
            flags  = hallucination_flags[start:start+cnt]
            start += cnt
            gt_blk = " ".join(preprocess_text(gt) for _, gt in block)
            raw_blk= " ".join(preprocess_text(raw) for raw, _ in block)
            wer_s, gt_tok_count = get_wer_from_api(WER_POST_ENDPOINT, gt_blk, raw_blk)
            hallucination_count = sum(flags)
            hallucination_percent = (100 * hallucination_count / gt_tok_count) if gt_tok_count else None
            write_metrics_row(metrics_ws, metadata, sid, sec,
                              gt_blk, raw_blk, wer_s, hallucination_count, gt_tok_count, hallucination_percent)

def get_hallucination_flags(input_ws: Worksheet, sid: str) -> list[int]:
    hdr = [c.value for c in input_ws[1]]
    try:
        hi = hdr.index(HALLUCINATION_COL_NAME)
    except ValueError:
        return []
    flags = []
    for row in input_ws.iter_rows(min_row=2, values_only=True):
        if row[0] == sid:
            flags.append(1 if row[hi] else 0)
    return flags

def style_columns(ws: Worksheet) -> None:
    widths = {1:27, 2:65, 3:9, 4:63, 5:63, 6:9, 7:12, 8:10, 9:15}
    for col, w in widths.items():
        ws.column_dimensions[get_column_letter(col)].width = w
    ws.auto_filter.ref = f"A1:I{ws.max_row}"

def calculate_hallucination_stats(metrics_ws: Worksheet) -> tuple[int, float]:
    hdr = [c.value for c in metrics_ws[1]]
    hi = hdr.index(HALLUCINATION_COUNT_COL_NAME)
    vals = [
        row[hi]
        for row in metrics_ws.iter_rows(min_row=2, values_only=True)
        if row[2] == ENTIRE_COL_NAME and isinstance(row[hi], (int, float))
    ]
    total = sum(vals)
    cnt   = len(vals)
    return total, (total / cnt if cnt else 0.0)

def calculate_mean_wer(metrics_ws: Worksheet) -> float:
    vals = [
        row[5]
        for row in metrics_ws.iter_rows(min_row=2, values_only=True)
        if row[2] == ENTIRE_COL_NAME and isinstance(row[5], (int, float))
    ]
    return sum(vals) / len(vals) if vals else 0.0

def add_summary_sheet(wb: Workbook) -> Worksheet:
    if SUMMARY_WORKSHEET_NAME in wb.sheetnames:
        del wb[SUMMARY_WORKSHEET_NAME]
    return wb.create_sheet(SUMMARY_WORKSHEET_NAME)

def write_summary(metrics_ws: Worksheet, summary_ws: Worksheet) -> None:
    headers = [
        METADATA_COL_NAME,
        AVERAGE_WER_COL_NAME,
        SESSION_COUNT_COL_NAME,
        SUMMARY_HALLUCINATION_COUNT_COL_NAME,
        HALLUCINATION_AVG_COL_NAME
    ]
    for i, title in enumerate(headers, start=1):
        c = summary_ws.cell(1, i, title)
        c.font = Font(name="Aptos", size=11, bold=True)
        c.alignment = Alignment("left", "center")

    meta = metrics_ws.cell(2, 1).value
    mean = calculate_mean_wer(metrics_ws)
    total_h, avg_h = calculate_hallucination_stats(metrics_ws)
    sessions = sum(
        1
        for r in metrics_ws.iter_rows(min_row=2, values_only=True)
        if r[2] == ENTIRE_COL_NAME
    )

    summary_ws.append([meta, mean, sessions, total_h, round(avg_h, 2)])
    summary_ws.cell(2, 2).number_format = "0.00"

    for c in summary_ws[2]:
        c.font = Font(name="Aptos", size=11)
        c.alignment = Alignment("left", "center")

    col_widths = {"A":30, "B":13, "C":16, "D":22, "E":19}
    for col, w in col_widths.items():
        summary_ws.column_dimensions[col].width = w

def add_sample_summary_sheet(wb: Workbook, metrics_ws: Worksheet) -> None:
    if SAMPLE_SUMMARY in wb.sheetnames:
        del wb[SAMPLE_SUMMARY]
    ws = wb.create_sheet(SAMPLE_SUMMARY)
    headers = [
        METADATA_COL_NAME,
        AVERAGE_WER_COL_NAME,
        SESSION_COUNT_COL_NAME,
        AVG_HALLUCINATION_PERCENT_COL_NAME
    ]
    for i, title in enumerate(headers, start=1):
        c = ws.cell(1, i, title)
        c.font = Font(name="Aptos", size=11, bold=True)
        c.alignment = Alignment("left", "center")
    ws.append([None] * len(headers))
    rows = list(metrics_ws.iter_rows(min_row=2, values_only=True))
    if CALL_LEVEL_GRANULARITY:
        wer_vals = [r[5] for r in rows if r[2] == ENTIRE_COL_NAME and isinstance(r[5], (int, float))]
        hp_vals  = [r[8] for r in rows if r[2] == ENTIRE_COL_NAME and isinstance(r[8], (int, float))]
    else:
        wer_vals = [r[5] for r in rows if r[2] != ENTIRE_COL_NAME and isinstance(r[5], (int, float))]
        hp_vals  = [r[8] for r in rows if r[2] != ENTIRE_COL_NAME and isinstance(r[8], (int, float))]
    avg_wer = sum(wer_vals) / len(wer_vals) if wer_vals else 0.0
    avg_hp  = sum(hp_vals) / len(hp_vals) if hp_vals else 0.0
    meta = metrics_ws.cell(2, 1).value
    sessions = len(set(r[1] for r in rows if r[2] == ENTIRE_COL_NAME))
    ws.append([meta, avg_wer, sessions, avg_hp])
    ws.cell(3, 2).number_format = "0.00"
    ws.cell(3, 4).number_format = "0.00000"
    for c in ws[3]:
        c.font = Font(name="Aptos", size=11)
        c.alignment = Alignment("left", "center")
        c.fill = PatternFill("solid", fgColor="00FFFF")
        c.border = thin_border
    col_widths = {"A":30, "B":13, "C":16, "D":22}
    for col, w in col_widths.items():
        ws.column_dimensions[col].width = w

def get_monthly_filepath(
    root_dir: str,
    metrics_files: list[str],
    prefix: str
) -> tuple[str, str, str, str]:
    dates = []
    for path in metrics_files:
        base = os.path.basename(path).rsplit(".", 1)[0]
        parts = base.split("_")
        rng, year = parts[1], parts[2]
        start, end = re.split(r'thru|-', rng, maxsplit=1)
        dates.append((start, end, year))
    earliest = min(d[0] for d in dates)
    latest   = max(d[1] for d in dates)
    year     = dates[0][2]
    filename = f"{prefix}_{earliest}thru{latest}_{year}_monthly_metrics.xlsx"
    return os.path.join(root_dir, filename), earliest, latest, year

def create_monthly_worksheet(
    root_dir: str,
    metrics_files: list[str],
    prefix: str
) -> str:
    monthly_path, earliest, latest, year = get_monthly_filepath(root_dir, metrics_files, prefix)
    if os.path.exists(monthly_path):
        os.remove(monthly_path)

    wb = Workbook()
    del wb[wb.sheetnames[0]]

    mon_metrics = wb.create_sheet(METRICS_WORKSHEET_NAME)
    first = True
    for mf in metrics_files:
        wbf = load_workbook(mf)
        wsf = wbf[METRICS_WORKSHEET_NAME]
        for i, row in enumerate(wsf.iter_rows(values_only=True), start=1):
            if i == 1 and not first:
                continue
            mon_metrics.append(row)
        first = False

    for c in mon_metrics[1]:
        c.font = Font(name="Aptos", size=9, bold=True)
        c.alignment = Alignment("left", "center")
    mon_metrics.freeze_panes = "A2"
    mon_metrics.auto_filter.ref = f"A1:{get_column_letter(mon_metrics.max_column)}{mon_metrics.max_row}"
    for col, w in {"A":27, "B":65, "C":9, "D":63, "E":63, "F":8, "G":12, "H":10, "I":15}.items():
        mon_metrics.column_dimensions[col].width = w
    for r in mon_metrics.iter_rows(min_row=2):
        r[5].number_format = "0.00"
        r[8].number_format = "0.00000"

    fill = PatternFill("solid", fgColor="00FFFF")
    for row in mon_metrics.iter_rows(min_row=2):
        if row[2].value == ENTIRE_COL_NAME:
            for c in row:
                c.fill = fill
                c.border = thin_border

    mon_sum = wb.create_sheet(SUMMARY_WORKSHEET_NAME)
    first = True
    for mf in metrics_files:
        wbf = load_workbook(mf)
        wsf = wbf[SUMMARY_WORKSHEET_NAME]
        for i, row in enumerate(wsf.iter_rows(values_only=True), start=1):
            if i == 1 and not first:
                continue
            mon_sum.append(row)
        first = False

    for c in mon_sum[1]:
        c.font = Font(name="Aptos", size=9, bold=True)
        c.alignment = Alignment("left", "center")
    mon_sum.freeze_panes = "A2"
    mon_sum.auto_filter.ref = f"A1:{get_column_letter(mon_sum.max_column)}{mon_sum.max_row}"
    for col, w in {"A":36, "B":11, "C":14, "D":19, "E":17}.items():
        mon_sum.column_dimensions[col].width = w

    mon_sum.append([None] * 5)
    entries = list(mon_sum.iter_rows(min_row=2, max_row=1+len(metrics_files), values_only=True))
    avg_wers = [r[1] for r in entries]
    num_sess = sum(int(r[2]) for r in entries)
    total_h  = sum(int(r[3]) for r in entries)
    avg_h    = round(total_h / num_sess, 2) if num_sess else 0.0

    meta_lbl = f"{prefix}_{earliest}thru{latest}_{year}"
    mon_sum.append([meta_lbl,
                    round(sum(avg_wers) / len(avg_wers), 2) if avg_wers else 0.0,
                    num_sess,
                    total_h,
                    avg_h])

    last = mon_sum.max_row
    fill_con = PatternFill("solid", fgColor="00FFFF")
    for row in mon_sum.iter_rows(min_row=1, max_row=last):
        for c in row:
            c.font = Font(name="Aptos", size=9, bold=(c.row == 1))
            if c.row == last:
                c.fill = fill_con
                c.border = thin_border

    add_sample_summary_sheet(wb, mon_metrics)

    wb.save(monthly_path)
    return monthly_path

def main() -> None:
    input_files = list_input_spreadsheets(ROOT_DIR)
    metrics_files: list[str] = []

    for inp in input_files:
        wb_in = load_workbook(inp)
        ws_name = next(n for n in wb_in.sheetnames if n.startswith(WORKSHEET_PREFIX))
        in_ws = wb_in[ws_name]

        out_path = get_name_of_results_spreadsheet(inp)
        if os.path.exists(out_path):
            os.remove(out_path)

        wb_out = Workbook()
        copy_ws = wb_out.active
        copy_ws.title = ws_name
        for row in in_ws.iter_rows(values_only=True):
            copy_ws.append(row)

        copy_ws.column_dimensions['A'].width = 69
        copy_ws.column_dimensions['B'].width = 35
        copy_ws.column_dimensions['C'].width = 35
        copy_ws.column_dimensions['D'].width = 12

        copy_ws.freeze_panes = "A2"
        copy_ws.auto_filter.ref = f"A1:D{copy_ws.max_row}"
        for row in copy_ws.iter_rows(min_row=1, max_row=copy_ws.max_row, min_col=1, max_col=4):
            for cell in row:
                cell.font = Font(name="Aptos", size=9, bold=(cell.row == 1))

        mws = add_metrics_sheet(wb_out)
        write_header(mws)
        md = os.path.basename(inp).rsplit(".", 1)[0]
        process_sessions(in_ws, mws, md)

        style_columns(mws)

        sws = add_summary_sheet(wb_out)
        write_summary(mws, sws)

        add_sample_summary_sheet(wb_out, mws)

        wb_out.save(out_path)
        metrics_files.append(out_path)
        print(f"{len(metrics_files)}/{len(input_files)} ... Saved metrics & summary to {out_path}")

    if DO_MONTHLY_CONSOLIDATION and metrics_files:
        mon_path = create_monthly_worksheet(ROOT_DIR, metrics_files, SPREADSHEET_PREFIX)
        print(f"Saved monthly consolidated metrics to {mon_path}")

if __name__ == "__main__":
    main()