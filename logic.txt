# wer_from_vad_analysis.py

from __future__ import annotations
import os
import httpx
from typing import List, Dict
from openpyxl import Workbook
from openpyxl.styles import Font
from openpyxl.utils import get_column_letter

# file locations & endpoints
INPUT_ANALYSIS_ROOT_DIR: str = "j:/tmp/vad/validation/analysis/"
ANALYSIS_FILE_EXTENSION: str = ".txt"
INPUT_GT_ROOT_DIR: str = "j:/tmp/vad/ground_truth/"
INPUT_FILENAME_PREFIX: str = "customer-side-analysis"
OUTPUT_SPREADSHEET_ROOT_DIR: str = "j:/tmp/vad/validation/analysis/"
WER_ENDPOINT: str = "http://api_for_wer:2517/wer"

# sheet names
ANALYSIS_WORKSHEET: str = "analysis"
WER_WORKSHEET:    str = "WER"

# column name globals
FIRST_SHEET_HEADERS: List[str] = ["filename", "seqNum", "loc", "dur", "transcript"]
WER_SHEET_HEADERS: List[str] = ["filename", "conditions", "full_transcript", "GT", "WER"]

# worksheet 1 (analysis)
FILENAME_WIDTH: int = 12
SEQNUM_WIDTH: int = 7
LOC_WIDTH: int = 7
DUR_WIDTH: int = 5
TRANSCRIPT_WIDTH: int = 30

# worksheet 2 (wer)
CONDITIONS_WIDTH: int = 12
FULL_TRANSCRIPT_WIDTH: int = 60
GT_WIDTH: int = 60
WER_WIDTH: int = 8

def get_analysis_files(root_dir: str, extension: str) -> List[str]:
    return [
        os.path.join(root_dir, f)
        for f in os.listdir(root_dir)
        if f.endswith(extension)
    ]

def get_suffix_from_filename(file_path: str, input_filename_prefix: str) -> str:
    stem = os.path.splitext(os.path.basename(file_path))[0]
    if stem.startswith(input_filename_prefix + "-"):
        return stem[len(input_filename_prefix) + 1 :]
    return stem

def parse_analysis_file(file_path: str) -> List[Dict[str, str]]:
    records: List[Dict[str, str]] = []
    with open(file_path, encoding="utf-8") as f:
        next(f)
        for line in f:
            cols = [c.strip() for c in line.rstrip("\n").split("|")]
            records.append({
                "filename": cols[0],
                "seqNum": cols[2],
                "loc": cols[9],
                "dur": cols[8],
                "transcript": cols[5],
            })
    return records

def group_transcripts_by_filename(records: List[Dict[str, str]]) -> Dict[str, List[str]]:
    groups: Dict[str, List[str]] = {}
    for r in records:
        groups.setdefault(r["filename"], []).append(r["transcript"])
    return groups

def find_ground_truth(filename: str, gt_root_dir: str) -> str:
    for fn in os.listdir(gt_root_dir):
        if fn.endswith("_ground_truth.txt"):
            prefix = fn[: -len("_ground_truth.txt")]
            if prefix in filename:
                with open(os.path.join(gt_root_dir, fn), encoding="utf-8") as gf:
                    return gf.read().strip()
    return ""

def calculate_wer(ground_truth: str, transcript: str, wer_endpoint: str) -> str:
    resp = httpx.post(wer_endpoint, json={"groundTruth": ground_truth, "transcript": transcript})
    return resp.text.strip()

def write_first_sheet(wb: Workbook, records: List[Dict[str, str]]) -> None:
    ws = wb.active
    ws.title = ANALYSIS_WORKSHEET
    ws.append(FIRST_SHEET_HEADERS)
    for r in records:
        ws.append([r[h] for h in FIRST_SHEET_HEADERS])
    header_font = Font(name="Aptos", size=9, bold=True)
    data_font = Font(name="Aptos", size=9)
    for cell in ws[1]:
        cell.font = header_font
    for row in ws.iter_rows(min_row=2, max_col=len(FIRST_SHEET_HEADERS)):
        for cell in row:
            cell.font = data_font
    ws.freeze_panes = "A2"
    ws.auto_filter.ref = f"A1:{get_column_letter(len(FIRST_SHEET_HEADERS))}{len(records) + 1}"
    for idx, w in enumerate([FILENAME_WIDTH, SEQNUM_WIDTH, LOC_WIDTH, DUR_WIDTH, TRANSCRIPT_WIDTH], start=1):
        ws.column_dimensions[get_column_letter(idx)].width = w

def write_wer_sheet(
    wb: Workbook,
    conditions: str,
    records: List[Dict[str, str]],
    gt_root_dir: str,
    wer_endpoint: str,
) -> None:
    ws = wb.create_sheet(WER_WORKSHEET)
    ws.append(WER_SHEET_HEADERS)
    groups = group_transcripts_by_filename(records)
    header_font = Font(name="Aptos", size=9, bold=True)
    data_font = Font(name="Aptos", size=9)
    for fn, transcripts in groups.items():
        full = " ".join(transcripts)
        gt = find_ground_truth(fn, gt_root_dir)
        wer = calculate_wer(gt, full, wer_endpoint)
        ws.append([fn, conditions, full, gt, wer])
    for cell in ws[1]:
        cell.font = header_font
    for row in ws.iter_rows(min_row=2, max_col=len(WER_SHEET_HEADERS)):
        for cell in row:
            cell.font = data_font
    ws.freeze_panes = "A2"
    ws.auto_filter.ref = f"A1:{get_column_letter(len(WER_SHEET_HEADERS))}{len(groups) + 1}"
    for idx, w in enumerate(
        [FILENAME_WIDTH, CONDITIONS_WIDTH, FULL_TRANSCRIPT_WIDTH, GT_WIDTH, WER_WIDTH], start=1
    ):
        ws.column_dimensions[get_column_letter(idx)].width = w

def process_file(file_path: str,
                 input_filename_prefix: str,
                 gt_root_dir: str,
                 wer_endpoint: str,
                 output_root_dir: str) -> None:
    records = parse_analysis_file(file_path)
    suffix = get_suffix_from_filename(file_path, input_filename_prefix)
    stem = os.path.splitext(os.path.basename(file_path))[0]
    output_path = os.path.join(output_root_dir, f"{stem}.xlsx")
    wb = Workbook()
    write_first_sheet(wb, suffix, records)
    write_wer_sheet(wb, suffix, records, gt_root_dir, wer_endpoint)
    wb.save(output_path)

def main(analysis_root_dir: str,
         extension: str,
         input_filename_prefix: str,
         gt_root_dir: str,
         wer_endpoint: str,
         output_root_dir: str) -> None:
    files = get_analysis_files(analysis_root_dir, extension)
    for file_path in files:
        process_file(file_path, input_filename_prefix, gt_root_dir, wer_endpoint, output_root_dir)

if __name__ == "__main__":
    main(INPUT_ANALYSIS_ROOT_DIR,
         ANALYSIS_FILE_EXTENSION,
         INPUT_FILENAME_PREFIX,
         INPUT_GT_ROOT_DIR,
         WER_ENDPOINT,
         OUTPUT_SPREADSHEET_ROOT_DIR)