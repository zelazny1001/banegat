#==== weekly_summary.py ====

from __future__ import annotations
from collections import defaultdict
from openpyxl.worksheet.worksheet import Worksheet
from openpyxl.styles import Font, PatternFill
from constants import (
    METADATA_COL_NAME,
    AVERAGE_WER_COL_NAME,
    SESSION_COUNT_COL_NAME,
    AVG_HALLUCINATION_PERCENT_COL_NAME,
    ENTIRE_COL_NAME,
    WER_COL_NAME,
    HALLUCINATION_PERCENT_COL_NAME,
    WEEKLY_SUMMARY_WORKSHEET_NAME,
    AVERAGING_PERIOD,
    SPREADSHEET_PREFIX,
    CALL_LEVEL_BKGND_COLOR,
)
from styling import set_weekly_summary_column_widths
from overall_summary import normalize_metadata

def add_weekly_summary_sheet(workbook) -> Worksheet:
    if WEEKLY_SUMMARY_WORKSHEET_NAME in workbook.sheetnames:
        del workbook[WEEKLY_SUMMARY_WORKSHEET_NAME]
    return workbook.create_sheet(WEEKLY_SUMMARY_WORKSHEET_NAME)

def write_weekly_summary(metrics_worksheet: Worksheet, summary_worksheet: Worksheet) -> None:
  write_weekly_summary_header(summary_worksheet)
  weekly_summaries = extract_metadata_groups(metrics_worksheet)
  write_weekly_summary_rows(summary_worksheet, weekly_summaries, start_row=3)
  header_map = {c.value: idx for idx, c in enumerate(summary_worksheet[1], start=1)}
  meta_index = header_map[METADATA_COL_NAME] - 1
  avg_wer_index = header_map[AVERAGE_WER_COL_NAME] - 1
  avg_hallucination_index = header_map[AVG_HALLUCINATION_PERCENT_COL_NAME] - 1
  session_index = header_map[SESSION_COUNT_COL_NAME] - 1
  summaries_from_sheet: dict[str, list[tuple[float, float, float]]] = {}
  for row in summary_worksheet.iter_rows(min_row=3, values_only=True):
    meta_label = row[meta_index]
    if not meta_label:
      continue
    w = row[avg_wer_index]
    h = row[avg_hallucination_index]
    s = row[session_index]
    summaries_from_sheet.setdefault(meta_label, []).append((w, s, h))
  write_weekly_summary_final_row(summary_worksheet, summaries_from_sheet)
  set_weekly_summary_column_widths(summary_worksheet)

def write_weekly_summary_header(summary_worksheet: Worksheet) -> None:
    titles = [METADATA_COL_NAME, AVERAGE_WER_COL_NAME, SESSION_COUNT_COL_NAME, AVG_HALLUCINATION_PERCENT_COL_NAME]
    for index, title in enumerate(titles, start=1):
        cell = summary_worksheet.cell(1, index, title)
        cell.font = Font(name="Aptos", size=9, bold=True)

def extract_metadata_groups(metrics_worksheet: Worksheet) -> dict[str, list[tuple[float, float]]]:
    header_map = {c.value: idx for idx, c in enumerate(metrics_worksheet[1], start=1)}
    metadata_index = header_map[METADATA_COL_NAME] - 1
    wer_index = header_map[WER_COL_NAME] - 1
    hallucination_percent_index = header_map[HALLUCINATION_PERCENT_COL_NAME] - 1
    section_index = header_map["section"] - 1
    groups = defaultdict(list)
    for row in metrics_worksheet.iter_rows(min_row=2, values_only=True):
        if row[section_index] == ENTIRE_COL_NAME:
            metadata_value = str(row[metadata_index])
            wer_value = row[wer_index]
            hallucination_value = row[hallucination_percent_index]
            if wer_value is not None:
                groups[metadata_value].append((wer_value, hallucination_value))
    return groups

def write_weekly_summary_rows(summary_worksheet: Worksheet, summaries: dict[str, list[tuple[float, float]]], start_row: int) -> None:
    for row_offset, (metadata_value, rows) in enumerate(summaries.items(), start=start_row):
        wer_values = [w for w, _ in rows]
        hallucination_values = [h for _, h in rows if h is not None]
        average_wer = round(sum(wer_values) / len(wer_values), 4) if wer_values else None
        average_hallucination = round(sum(hallucination_values) / len(hallucination_values), 5) if hallucination_values else None
        count = len(wer_values)
        summary_worksheet.cell(row_offset, 1, metadata_value)
        summary_worksheet.cell(row_offset, 2, average_wer)
        summary_worksheet.cell(row_offset, 3, count)
        summary_worksheet.cell(row_offset, 4, average_hallucination)
        for col in range(1, 5):
            summary_worksheet.cell(row_offset, col).font = Font(name="Aptos", size=9)

def write_weekly_summary_final_row(summary_worksheet: Worksheet,
                                   summaries: dict[str, list[tuple[float, float, float]]]) -> None:
  all_rows = []
  for metadata_value, rows in summaries.items():
    for wer, sessions, hallucinations in rows:
      all_rows.append((metadata_value, wer, sessions, hallucinations))

  wer_values = [row[1] for row in all_rows if isinstance(row[1], (int, float))]
  average_wer = (sum(wer_values) / len(wer_values)) if wer_values else None
  session_values = [row[2] for row in all_rows if isinstance(row[2], (int, float))]
  total_sessions = int(sum(session_values)) if session_values else 0
  hallucination_values = [row[3] for row in all_rows if isinstance(row[3], (int, float))]
  average_hallucination = (sum(hallucination_values) / len(hallucination_values)) if hallucination_values else None

  metadata_rows = [[row[0] for row in all_rows]]
  normalized_metadata = normalize_metadata(metadata_rows, 0, SPREADSHEET_PREFIX)
  final_row_index = len(summaries) + 4
  summary_worksheet.cell(final_row_index, 1, normalized_metadata)
  c2 = summary_worksheet.cell(final_row_index, 2, average_wer)
  c3 = summary_worksheet.cell(final_row_index, 3, total_sessions)
  c4 = summary_worksheet.cell(final_row_index, 4, average_hallucination)

  for col in (1, 2, 3, 4):
    cell = summary_worksheet.cell(final_row_index, col)
    cell.font = Font(name="Aptos", size=9)
    cell.fill = PatternFill("solid", fgColor=CALL_LEVEL_BKGND_COLOR)

  c2.number_format = "0.000"
  c4.number_format = "0.000"