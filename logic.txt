def create_d3_fluid_heatmap(weights_difference, output_file='d3_heatmap.html'):
  # Prepare data for D3
  data = []
  for feature_idx, feature in enumerate(weights_difference.index):
    for intent_idx, intent in enumerate(weights_difference.columns):
      value = weights_difference.iloc[feature_idx, intent_idx]
      data.append({
        'feature': str(feature),
        'intent': str(intent),
        'value': float(value),
        'x': intent_idx,
        'y': feature_idx
      })

  # Get min/max for color scaling
  min_val = float(weights_difference.values.min())
  max_val = float(weights_difference.values.max())

  # Create HTML with D3
  html_content = f"""
    <!DOCTYPE html>
    <html>
    <head>
        <title>D3 Fluid Heatmap - Weight Differences</title>
        <script src="https://d3js.org/d3.v7.min.js"></script>
        <style>
            body {{ font-family: Arial, sans-serif; margin: 20px; }}
            #heatmap {{ overflow: auto; }}
            .cell {{ stroke: #fff; stroke-width: 0.5px; }}
            .tooltip {{
                position: absolute;
                background: rgba(0, 0, 0, 0.8);
                color: white;
                padding: 5px;
                border-radius: 3px;
                pointer-events: none;
                font-size: 12px;
            }}
            .zoom-controls {{ margin-bottom: 10px; }}
        </style>
    </head>
    <body>
        <h2>Difference in Weights Between Model 1 and Model 2</h2>
        <div class="zoom-controls">
            <button onclick="zoomIn()">Zoom In</button>
            <button onclick="zoomOut()">Zoom Out</button>
            <button onclick="resetZoom()">Reset Zoom</button>
        </div>
        <div id="heatmap"></div>

        <script>
            const data = {json.dumps(data)};
            const minVal = {min_val};
            const maxVal = {max_val};

            const margin = {{top: 50, right: 30, bottom: 100, left: 200}},
                  width = 1200 - margin.left - margin.right,
                  height = 800 - margin.top - margin.bottom;

            let currentZoom = 1;

            const colorScale = d3.scaleLinear()
                .domain([minVal, 0, maxVal])
                .range(["blue", "white", "red"]);

            const svg = d3.select("#heatmap")
                .append("svg")
                .attr("width", width + margin.left + margin.right)
                .attr("height", height + margin.top + margin.bottom)
                .append("g")
                .attr("transform", `translate(${{margin.left}},${{margin.top}})`);

            const xScale = d3.scaleBand()
                .domain(data.map(d => d.intent))
                .range([0, width])
                .padding(0.01);

            const yScale = d3.scaleBand()
                .domain(data.map(d => d.feature))
                .range([0, height])
                .padding(0.01);

            // Add axes
            const xAxis = d3.axisTop(xScale).tickSize(0);
            const yAxis = d3.axisLeft(yScale).tickSize(0);

            svg.append("g")
                .attr("class", "x axis")
                .call(xAxis)
                .selectAll("text")
                .style("text-anchor", "end")
                .attr("dx", "-.8em")
                .attr("dy", ".15em")
                .attr("transform", "rotate(-65)");

            svg.append("g")
                .attr("class", "y axis")
                .call(yAxis);

            // Create cells
            const cells = svg.selectAll(".cell")
                .data(data)
                .enter().append("rect")
                .attr("class", "cell")
                .attr("x", d => xScale(d.intent))
                .attr("y", d => yScale(d.feature))
                .attr("width", xScale.bandwidth())
                .attr("height", yScale.bandwidth())
                .style("fill", d => colorScale(d.value))
                .on("mouseover", function(event, d) {{
                    tooltip.style("visibility", "visible")
                           .html(`Feature: ${{d.feature}}<br>Intent: ${{d.intent}}<br>Value: ${{d.value.toFixed(4)}}`);
                }})
                .on("mousemove", function(event) {{
                    tooltip.style("top", (event.pageY - 10) + "px")
                           .style("left", (event.pageX + 10) + "px");
                }})
                .on("mouseout", function() {{
                    tooltip.style("visibility", "hidden");
                }});

            const tooltip = d3.select("body").append("div")
                .attr("class", "tooltip")
                .style("visibility", "hidden");

            function zoomIn() {{
                currentZoom *= 1.2;
                updateZoom();
            }}

            function zoomOut() {{
                currentZoom /= 1.2;
                updateZoom();
            }}

            function resetZoom() {{
                currentZoom = 1;
                updateZoom();
            }}

            function updateZoom() {{
                svg.attr("transform", `translate(${{margin.left}},${{margin.top}}) scale(${{currentZoom}})`);
            }}
        </script>
    </body>
    </html>
    """

  with open(output_file, 'w') as f:
    f.write(html_content)

  return output_file