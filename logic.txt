# sensitivity_set_expected_intent.py

from __future__ import annotations
import os
import csv
from typing import List, Dict, Any
from openpyxl import load_workbook, Workbook
from openpyxl.styles import Font
from openpyxl.utils import get_column_letter

INPUT_FOLDER = "j:/projects/sheet-logic/"
INPUT_SPREADSHEET = "sensitivity-test.xlsx"
INPUT_WORKSHEET = "sensitivity_test_utterances"
OUTPUT_FOLDER = INPUT_FOLDER
OUTPUT_SPREADSHEET = "sensitivity-test-out.xlsx"
OUTPUT_WORKSHEET = "sensitivity_test_utterances"

def load_data() -> List[Dict[str, Any]]:
    path = os.path.join(INPUT_FOLDER, INPUT_SPREADSHEET)
    wb = load_workbook(path)
    ws = wb[INPUT_WORKSHEET]
    rows = list(ws.iter_rows(values_only=True))
    header = rows[0]
    return [dict(zip(header, row)) for row in rows[1:]]

def compute_expected(data: List[Dict[str, Any]]) -> List[Dict[str, Any]]:
    expected_map: Dict[int, str] = {}
    for row in data:
        if row["mask_word"] == "-":
            expected_map[row["index"]] = row["predicted"]
    for row in data:
        row["expected"] = expected_map.get(row["index"], "")
    return data

def write_output(data: List[Dict[str, Any]]):
    path = os.path.join(OUTPUT_FOLDER, OUTPUT_SPREADSHEET)
    wb = Workbook()
    ws = wb.active
    ws.title = OUTPUT_WORKSHEET
    headers = ["index", "mask_word", "utterance", "expected", "predicted", "score"]
    ws.append(headers)
    for col_idx, header in enumerate(headers, start=1):
        cell = ws.cell(row=1, column=col_idx)
        cell.font = Font(name="Arial", size=9, bold=True)
    for row_idx, row in enumerate(data, start=2):
        for col_idx, header in enumerate(headers, start=1):
            ws.cell(row=row_idx, column=col_idx, value=row.get(header)).font = Font(name="Arial", size=9)

    last_col = get_column_letter(len(headers))
    ws.freeze_panes = "A2"
    ws.auto_filter.ref = f"A1:{last_col}{len(data)+1}"
    widths = [7, 12, 60, 35, 35, 12]
    for idx, width in enumerate(widths, start=1):
        ws.column_dimensions[get_column_letter(idx)].width = width
    wb.save(path)

def write_csv(data: List[Dict[str, Any]]):
    csv_path = os.path.join(OUTPUT_FOLDER, os.path.splitext(OUTPUT_SPREADSHEET)[0] + ".csv")
    headers = ["index", "mask_word", "utterance", "expected", "predicted", "score"]
    with open(csv_path, "w", newline="", encoding="utf-8") as f:
        writer = csv.writer(f, delimiter="|")
        writer.writerow(headers)
        for row in data:
            writer.writerow([row.get(col, "") for col in headers])

def main():
    data = load_data()
    processed = compute_expected(data)
    write_output(processed)
    write_csv(processed)

if __name__ == "__main__":
    main()