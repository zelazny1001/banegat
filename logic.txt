from __future__ import annotations
import re
from openpyxl.worksheet.worksheet import Worksheet
from openpyxl.styles import Font, Alignment, PatternFill
from constants import (
  MONTHLY_SUMMARY_WORKSHEET_NAME,
  METADATA_COL_NAME,
  AVERAGE_WER_COL_NAME,
  SESSION_COUNT_COL_NAME,
  AVG_HALLUCINATION_PERCENT_COL_NAME,
  WER_COL_NAME,
  HALLUCINATION_PERCENT_COL_NAME,
  SECTION_COL_NAME,
  ENTIRE_COL_NAME,
  SPREADSHEET_PREFIX,
  CALL_LEVEL_GRANULARITY,
  CALL_LEVEL_BKGND_COLOR,
  SAMPLE_LEVEL_BKGND_COLOR,
  SUMMARY_COL_WIDTHS,
)
from styling import THIN_BORDER

def normalize_metadata(rows: list[list[str]], meta_index: int, prefix: str) -> str:
    metas = [r[meta_index] for r in rows if r[meta_index]]
    parts = [re.search(r"_(\d{4})(?:thru|-)(\d{4})_(\d{4})", m) for m in metas if m]
    earliest = min(p.group(1) for p in parts if p)
    latest = max(p.group(2) for p in parts if p)
    year = parts[0].group(3) if parts else "????"
    return f"{prefix}_{earliest}-{latest}_{year}"

def add_overall_summary_sheet(workbook, metrics_worksheet: Worksheet) -> None:
    if MONTHLY_SUMMARY_WORKSHEET_NAME in workbook.sheetnames:
        del workbook[MONTHLY_SUMMARY_WORKSHEET_NAME]
    summary_sheet = workbook.create_sheet(MONTHLY_SUMMARY_WORKSHEET_NAME)
    headers = [METADATA_COL_NAME, AVERAGE_WER_COL_NAME, SESSION_COUNT_COL_NAME, AVG_HALLUCINATION_PERCENT_COL_NAME]
    for col, title in enumerate(headers, start=1):
        cell = summary_sheet.cell(1, col, title)
        cell.font = Font(name="Aptos", size=9, bold=True)
        cell.alignment = Alignment("left", "center")
    header_map = {c.value: idx for idx, c in enumerate(metrics_worksheet[1], start=1)}
    rows = list(metrics_worksheet.iter_rows(min_row=2, values_only=True))
    wer_index = header_map[WER_COL_NAME] - 1
    hallucination_percent_index = header_map[HALLUCINATION_PERCENT_COL_NAME] - 1
    section_index = header_map[SECTION_COL_NAME] - 1
    metadata_index = header_map[METADATA_COL_NAME] - 1
    if CALL_LEVEL_GRANULARITY:
        wer_values = [row[wer_index] for row in rows if row[section_index] == ENTIRE_COL_NAME and isinstance(row[wer_index], (int, float))]
        hallucination_values = [row[hallucination_percent_index] for row in rows if row[section_index] == ENTIRE_COL_NAME and isinstance(row[hallucination_percent_index], (int, float))]
    else:
        wer_values = [row[wer_index] for row in rows if row[section_index] != ENTIRE_COL_NAME and isinstance(row[wer_index], (int, float))]
        hallucination_values = [row[hallucination_percent_index] for row in rows if row[section_index] != ENTIRE_COL_NAME and isinstance(row[hallucination_percent_index], (int, float))]
    average_wer = sum(wer_values) / len(wer_values) if wer_values else 0.0
    average_hallucination = sum(hallucination_values) / len(hallucination_values) if hallucination_values else 0.0
    normalized_meta = normalize_metadata(rows, metadata_index, SPREADSHEET_PREFIX)
    session_count = sum(1 for row in rows if row[section_index] == ENTIRE_COL_NAME)
    values = [normalized_meta, average_wer, session_count, average_hallucination]

    for col, value in enumerate(values, start=1):
        cell = summary_sheet.cell(2, col, value)
        cell.font = Font(name="Aptos", size=9)
        cell.alignment = Alignment("left", "center")
        cell.fill = PatternFill("solid", fgColor=CALL_LEVEL_BKGND_COLOR if CALL_LEVEL_GRANULARITY else SAMPLE_LEVEL_BKGND_COLOR)
        cell.border = THIN_BORDER
        if col in (2, 4):
          cell.number_format = "0.0000"

    for col_letter, width in SUMMARY_COL_WIDTHS.items():
        summary_sheet.column_dimensions[col_letter].width = width
