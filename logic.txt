# wer_alignment_1_hyp_txt_to_html.py

from __future__ import annotations
from typing import List
from pathlib import Path
from collections import Counter

ALIGNMENT_DIR = Path("j:/projects/wer-test/sdi-alignments_1hyp/txt/")
HTML_DIR = Path("j:/projects/wer-test/sdi-alignments_1hyp/html/")

def read_alignment_file(file_path: Path) -> List[List[str]]:
    lines = file_path.read_text(encoding="utf-8").splitlines()
    return [line.split(" | ") for line in lines[1:] if line.strip()]

def short_code(outcome: str) -> str:
    return {
        "CORRECT": "C",
        "SUBSTITUTION": "S",
        "INSERTION": "I",
        "DELETION": "D"
    }.get(outcome.strip().upper(), "")

def get_cell_style(col_index: int, group_start: int, outcome_code: str) -> str:
    base_style = "font-family:Arial;font-size:7pt;border:1px dotted black;"
    if group_start <= col_index < group_start + 3:
        if outcome_code == "C":
            return base_style + "background-color:#73f097;color:#000000;"
        if outcome_code == "D":
            return base_style + "background-color:#ff0000;color:#ffffff;"
        if outcome_code == "S":
            return base_style + "background-color:#fafc5c;color:#000000;"
        if outcome_code == "I":
            return base_style + "background-color:#55a0e0;color:#ffffff;"
    return base_style

def make_html_row(cells: List[str], bold: bool = False) -> str:
    tag = "th" if bold else "td"
    row = "<tr>"
    for i, cell in enumerate(cells):
        style = (
            "font-family:Arial;font-size:7pt;border:1px dotted black;font-weight:bold;"
            if bold else get_cell_style(i, 0, cells[0])
        )
        row += f"<{tag} style=\"{style}\">{cell}</{tag}>"
    row += "</tr>"
    return row

def get_outcome_counts(prefix: str, rows: List[List[str]], outcome_col: int, gt_col: int, hyp_col: int) -> str:
    outcomes = [short_code(row[outcome_col]) for row in rows]
    counts = Counter(outcomes)
    gt_count = sum(1 for row in rows if row[gt_col].strip())
    tr_count = sum(1 for row in rows if row[hyp_col].strip())
    return (
        f"<p style='font-family:Arial;font-size:8pt'>{prefix}&nbsp;&nbsp;"
        f"C={counts['C']}, S={counts['S']}, D={counts['D']}, I={counts['I']}, "
        f"GT={gt_count}, TR={tr_count}</p>"
    )

def html_from_alignment(file_path: Path) -> str:
    rows = read_alignment_file(file_path)
    html_lines = [
        get_outcome_counts("model", rows, 0, 1, 2),
        "<table>",
        "<tbody>"
    ]
    header = ["outcome", "GT", "predicted"]
    html_lines.append(make_html_row(header, bold=True))
    for row in rows:
        model_code = short_code(row[0])
        html_row = [model_code, row[1], row[2]]
        html_lines.append(make_html_row(html_row))
    html_lines += ["</tbody>", "</table>"]
    return "\n".join(html_lines)

def write_html_to_file(html_content: str, out_path: Path) -> None:
    out_path.write_text(html_content, encoding="utf-8")
    print(f"processing alignments and writing to: {out_path}")

def main():
    HTML_DIR.mkdir(parents=True, exist_ok=True)
    for file_path in ALIGNMENT_DIR.glob("*.txt"):
        html = html_from_alignment(file_path)
        out_path = HTML_DIR / (file_path.stem + ".html")
        write_html_to_file(html, out_path)

if __name__ == "__main__":
    main()