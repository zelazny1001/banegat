import os
from openpyxl import load_workbook
from openpyxl.utils import get_column_letter
from openpyxl.styles import Font, Alignment

OUTPUT_SPREADSHEET_ROOT_DIR = "j:/tmp/output_dir/"
CONSOLIDATED_SPREADSHEET_NAME = "consolidated-for-bracing.xlsx"
ANALYSIS_WORKSHEET = "analysis"
INPUT_GT_ROOT_DIR = "j:/tmp/ground_truths/"

FILENAME_COL = "filename"
SEQNUM_COL   = "seqNum"
GROUND_TRUTH_COL = "GT"

def get_suffix_from_filename(filename: str, gt_root_dir: str) -> str:
    candidates = sorted(
        (fn for fn in os.listdir(gt_root_dir)
         if fn.startswith("ground_truth_") and fn.endswith(".txt")),
        key=lambda fn: len(fn[len("ground_truth_"):-4]),
        reverse=True
    )
    for fn in candidates:
        suffix = fn[len("ground_truth_"):-4]
        if suffix in filename:
            return suffix
    return None

def get_line_from_file(gt_root_dir: str, suffix: str, n: int) -> str:
    path = os.path.join(gt_root_dir, f"ground_truth_{suffix}.txt")
    try:
        with open(path, "r", encoding="utf-8") as fh:
            for i, line in enumerate(fh, start=1):
                if i == n:
                    return line.rstrip("\n")
    except FileNotFoundError:
        pass
    return ""

def check_seqnum_matches_file_length(gt_root_dir: str, suffix_max: dict):
    for suffix, seq_max in suffix_max.items():
        path = os.path.join(gt_root_dir, f"ground_truth_{suffix}.txt")
        try:
            with open(path, "r", encoding="utf-8") as fh:
                total_lines = sum(1 for _ in fh)
            if total_lines != seq_max:
                print(
                    f"Warning for suffix '{suffix}': "
                    f"max seqNum in sheet = {seq_max}, "
                    f"but file has {total_lines} lines."
                )
        except FileNotFoundError:
            print(f"Warning: GT file for suffix '{suffix}' not found at {path}")

def main():
    wb_path = os.path.join(OUTPUT_SPREADSHEET_ROOT_DIR, CONSOLIDATED_SPREADSHEET_NAME)
    wb = load_workbook(wb_path)
    ws = wb[ANALYSIS_WORKSHEET]

    # find column indices
    headers = {cell.value: idx+1 for idx, cell in enumerate(ws[1])}
    fn_col = headers[FILENAME_COL]
    seq_col = headers[SEQNUM_COL]
    gt_col  = ws.max_column + 1

    # create GT header
    ws.cell(row=1, column=gt_col, value=GROUND_TRUTH_COL)
    col_letter = get_column_letter(gt_col)
    ws.column_dimensions[col_letter].width = 60
    ws.cell(row=1, column=gt_col).font = Font(name="Aptos", size=9)
    ws.cell(row=1, column=gt_col).alignment = Alignment(horizontal="left")

    # track max seqNum per suffix
    suffix_max = {}

    # fill GT column
    for row in range(2, ws.max_row+1):
        filename = ws.cell(row=row, column=fn_col).value or ""
        seqnum   = ws.cell(row=row, column=seq_col).value or 0

        suffix = get_suffix_from_filename(filename, INPUT_GT_ROOT_DIR)
        if suffix:
            # update max
            suffix_max[suffix] = max(suffix_max.get(suffix, 0), seqnum)

            gt_value = get_line_from_file(INPUT_GT_ROOT_DIR, suffix, seqnum)
        else:
            gt_value = ""

        cell = ws.cell(row=row, column=gt_col, value=gt_value)
        cell.font = Font(name="Aptos", size=9)
        cell.alignment = Alignment(horizontal="left", wrap_text=True)

    # save and then check
    wb.save(wb_path)
    check_seqnum_matches_file_length(INPUT_GT_ROOT_DIR, suffix_max)

if __name__ == "__main__":
    print(f"Ground Truth Appender process started .....")
    main()
    print(f"... Ground Truth Appender process completed")