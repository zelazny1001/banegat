# cleanse_raw_log_capture.py -- first line of implementation file
from __future__ import annotations
import os
from datetime import datetime

INPUT_DIR = "/the/input/"
INPUT_FILEPATH = INPUT_DIR + "inputfilename.txt"
OUTPUT_DIR = INPUT_DIR

def parse_line(line: str) -> list[str]:
    return [segment.split(":", 1)[1] for segment in line.rstrip("\n").split("|")]

HEADER = [
    "csid",
    "exec_ms",
    "threadName",
    "threadsActive",
    "heapTotal",
    "heapFree",
    "heapMax",
]

def generate_output_filename(input_file: str, output_dir: str) -> str:
    base = os.path.splitext(os.path.basename(input_file))[0]
    timestamp = datetime.now().strftime("%Y-%m-%d-%H-%M-%S")
    return os.path.join(output_dir, f"{base}-{timestamp}.txt")

def cleanse_file(input_file: str, output_dir: str) -> str:
    output_file = generate_output_filename(input_file, output_dir)
    with open(input_file, "r") as infile, open(output_file, "w") as outfile:
        outfile.write("|".join(HEADER) + "\n")
        for line in infile:
            values = parse_line(line)
            outfile.write("|".join(values) + "\n")
    return output_file

def main() -> None:
    result = cleanse_file(INPUT_FILEPATH, OUTPUT_DIR)
    print(result)

if __name__ == "__main__":
    main()